{
  "address": "0xCD31F5Dc6E2fbDE1993bc50c43cB1b4EA6e7b0Af",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tokenId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "erc721Destination",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotal",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PermissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferedOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotal",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTokenId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAuthenticated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPrivilages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Destination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferOwnershipToTokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletType",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5ae092c48b04e73de581f362e6fc529672e59cc61d85bec13f8b0892cbb012b",
  "receipt": {
    "to": null,
    "from": "0x246792B06cfdB463128b3Ee3D95D9713103930ED",
    "contractAddress": "0xCD31F5Dc6E2fbDE1993bc50c43cB1b4EA6e7b0Af",
    "transactionIndex": 0,
    "gasUsed": "957717",
    "logsBloom": "0x
    "blockHash": "0x50087b7ed7f18931ea9a2be9a60fe4cfa3597c501dc8a72e068b7d0dddf83cbf",
    "transactionHash": "0xa5ae092c48b04e73de581f362e6fc529672e59cc61d85bec13f8b0892cbb012b",
    "logs": [],
    "blockNumber": 211,
    "cumulativeGasUsed": "957717",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    "0xD6EA806Ee9E4D2B4AE921f2BFf1eB9a448780323"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f3f5743d043d6d0147204e57adad5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc721Destination\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferedOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPrivilages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnershipToTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletType\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"makes the owner field the owner of the contract not the deployer.\",\"params\":{\"erc721Destination\":\"the main ERC721 contract\",\"tokenId\":\"the tokenId from the main ERC721 contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256,uint256)\":{\"notice\":\"Fired when a deposit is made\"},\"Withdraw(address,uint256,uint256)\":{\"notice\":\"Fired with a withdraw is made\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates new wallet contract, tokenId refers to the ERC721 contract this wallet was spawned from.\"},\"currentTokenId()\":{\"notice\":\"the main ERC721 contract this wallet is attached too\"},\"deposit()\":{\"notice\":\"Allows anyone to deposit ERC20 into this wallet.\"},\"erc721()\":{\"notice\":\"the location of the main ERC721 contract this wallet was spawned from;\"},\"getBalance()\":{\"notice\":\"Returns the balance of the wallet\"},\"getIntegrity()\":{\"notice\":\"used by InfinityMintLinker to verify this contract is the one it says\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Opts in this contract to receipt ERC721\"},\"transferOwnershipToTokenOwner()\":{\"notice\":\"This can be called by the new token owner at any time and it will match the current owner of the contract to the tokenId, in all cases the wallet will still be attached to the owner of the tokenId and when its not it will simply move over permissions of the contract to the new owner\"},\"walletType()\":{\"notice\":\"the version type of wallet this is\"},\"withdraw()\":{\"notice\":\"Allows you to withdraw\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InfinityMintWallet.sol\":\"InfinityMintWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/Authentication.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InfinityMintObject.sol\\\";\\n\\nabstract contract Authentication {\\n    address public deployer;\\n    /// @notice for re-entry prevention, keeps track of a methods execution count\\n    uint256 private executionCount;\\n\\n    mapping(address => bool) public approved;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n        approved[msg.sender] = true;\\n        executionCount = 0;\\n    }\\n\\n    event PermissionChange(\\n        address indexed sender,\\n        address indexed changee,\\n        bool value\\n    );\\n\\n    event TransferedOwnership(address indexed from, address indexed to);\\n\\n    /// @notice Limits execution of a method to once in the given context.\\n    /// @dev prevents re-entry attack\\n    modifier onlyOnce() {\\n        executionCount += 1;\\n        uint256 localCounter = executionCount;\\n        _;\\n        require(localCounter == executionCount);\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(deployer == msg.sender, \\\"not deployer\\\");\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(deployer == msg.sender || approved[msg.sender], \\\"not approved\\\");\\n        _;\\n    }\\n\\n    function setPrivilages(address addr, bool value) public onlyDeployer {\\n        require(addr != deployer, \\\"cannot modify deployer\\\");\\n        approved[addr] = value;\\n\\n        emit PermissionChange(msg.sender, addr, value);\\n    }\\n\\n    function multiApprove(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isAuthenticated(address addr) external view returns (bool) {\\n        return addr == deployer || approved[addr];\\n    }\\n\\n    function transferOwnership(address addr) public onlyDeployer {\\n        approved[deployer] = false;\\n        deployer = addr;\\n        approved[addr] = true;\\n\\n        emit TransferedOwnership(msg.sender, addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0895e5e3736b655a297268b47327827b4de3b5a561af0ee25fca784bdf2d70d1\",\"license\":\"UNLICENSED\"},\"contracts/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol) (Thanks <3)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, ERC721 Receiver\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata is IERC721 {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory _name);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8ad12be19f3ae856646c1b311cc156ce6d8630322019e7dde691d82158757ee\",\"license\":\"MIT\"},\"contracts/InfinityMintObject.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\n//this is implemented by every contract in our system\\nimport \\\"./InfinityMintUtil.sol\\\";\\nimport \\\"./InfinityMintValues.sol\\\";\\n\\nabstract contract InfinityMintObject {\\n    /// @notice The main InfinityMint object, TODO: Work out a way for this to easily be modified\\n    struct InfinityObject {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32 currentTokenId;\\n        address owner;\\n        uint32[] colours;\\n        bytes mintData;\\n        uint32[] assets;\\n        string[] names;\\n        address[] destinations;\\n    }\\n\\n    /// @notice Creates a new struct from arguments\\n    /// @dev Stickers are not set through this, structs cannot be made with sticker contracts already set and have to be set manually\\n    /// @param currentTokenId the tokenId,\\n    /// @param pathId the infinity mint paths id\\n    /// @param pathSize the size of the path (only for vectors)\\n    /// @param assets the assets which make up the token\\n    /// @param names the names of the token, its just the name but split by the splaces.\\n    /// @param colours decimal colours which will be convered to hexadecimal colours\\n    /// @param mintData variable dynamic field which is passed to ERC721 Implementor contracts and used in a lot of dynamic stuff\\n    /// @param _sender aka the owner of the token\\n    /// @param destinations a list of contracts associated with this token\\n    function createInfinityObject(\\n        uint32 currentTokenId,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory assets,\\n        string[] memory names,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        address _sender,\\n        address[] memory destinations\\n    ) internal pure returns (InfinityObject memory) {\\n        return\\n            InfinityObject(\\n                pathId,\\n                pathSize,\\n                currentTokenId,\\n                _sender, //the sender aka owner\\n                colours,\\n                mintData,\\n                assets,\\n                names,\\n                destinations\\n            );\\n    }\\n\\n    /// @notice basically unpacks a return object into bytes.\\n    function encode(InfinityObject memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                data.pathId,\\n                data.pathSize,\\n                data.currentTokenId,\\n                data.owner,\\n                abi.encode(data.colours),\\n                data.mintData,\\n                data.assets,\\n                data.names,\\n                data.destinations\\n            );\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function value() internal view returns (uint256) {\\n        return (msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xe47b88d98889304cc2e47c41a78ef5534d33ad9548970524f3b72390d7e08e3a\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintUtil.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nlibrary InfinityMintUtil {\\n    function toString(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function filepath(\\n        string memory directory,\\n        string memory file,\\n        string memory extension\\n    ) internal pure returns (string memory) {\\n        return\\n            abi.decode(abi.encodePacked(directory, file, extension), (string));\\n    }\\n\\n    //checks if two strings (or bytes) are equal\\n    function isEqual(bytes memory s1, bytes memory s2)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory b1 = bytes(s1);\\n        bytes memory b2 = bytes(s2);\\n        uint256 l1 = b1.length;\\n        if (l1 != b2.length) return false;\\n        for (uint256 i = 0; i < l1; i++) {\\n            //check each byte\\n            if (b1[i] != b2[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x414a2931293db93950726b75c54b8083051b1004291fd70bac069ad5d769bc53\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert(\\\"Invalid Value\\\");\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0xa3df569a4c7a710808d576eb4608fd23656a38ab04fb2288a5cc341d9d65c78a\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintWallet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Authentication.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IntegrityInterface.sol\\\";\\n\\ncontract InfinityMintWallet is\\n    Authentication,\\n    IERC721Receiver,\\n    IntegrityInterface\\n{\\n    /// @notice the version type of wallet this is\\n    bytes public walletType = \\\"Wallet\\\";\\n    /// @notice the location of the main ERC721 contract this wallet was spawned from;\\n    address public erc721;\\n    /// @notice the main ERC721 contract this wallet is attached too\\n    uint32 public currentTokenId;\\n    /// @notice the value/balance of the current wallet\\n    uint256 private walletValue;\\n\\n    /// @notice Fired when a deposit is made\\n    event Deposit(address indexed sender, uint256 amount, uint256 newTotal);\\n    /// @notice Fired with a withdraw is made\\n    event Withdraw(address indexed sender, uint256 amount, uint256 newTotal);\\n\\n    /// @notice Creates new wallet contract, tokenId refers to the ERC721 contract this wallet was spawned from.\\n    /// @dev makes the owner field the owner of the contract not the deployer.\\n    /// @param tokenId the tokenId from the main ERC721 contract\\n    /// @param erc721Destination the main ERC721 contract\\n    constructor(uint32 tokenId, address erc721Destination) Authentication() {\\n        //this only refers to being allowed to deposit into the wallet\\n        currentTokenId = tokenId;\\n        erc721 = erc721Destination;\\n        walletValue = 0;\\n    }\\n\\n    /// @notice used by InfinityMintLinker to verify this contract is the one it says\\n    function getIntegrity()\\n        public\\n        view\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            bytes memory,\\n            bytes4\\n        )\\n    {\\n        return (\\n            address(this),\\n            deployer,\\n            currentTokenId,\\n            \\\"wallet\\\", //no version type with wallet\\n            type(IntegrityInterface).interfaceId\\n        );\\n    }\\n\\n    /// @notice Opts in this contract to receipt ERC721\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n\\t\\t@notice This can be called by the new token owner at any time and it will match the current owner of the contract to the tokenId,\\n\\t\\tin all cases the wallet will still be attached to the owner of the tokenId and when its not it will simply move over permissions of\\n\\t\\tthe contract to the new owner\\n\\t */\\n    function transferOwnershipToTokenOwner() public onlyOnce {\\n        address owner = IERC721(erc721).ownerOf(currentTokenId);\\n        require(deployer != owner, \\\"owner of the token is the deployer\\\");\\n        require(msg.sender == owner, \\\"sender must be the new owner\\\");\\n\\n        transferOwnership(owner);\\n    }\\n\\n    function transfer(\\n        address erc721Destination,\\n        address to,\\n        uint256 tokenId\\n    ) public onlyApproved {\\n        (bool success, bytes memory returnData) = erc721Destination.call{\\n            value: 0\\n        }(\\n            abi.encodeWithSignature(\\n                \\\"transfer(address,address,uint256)\\\",\\n                address(this),\\n                address(to),\\n                tokenId\\n            )\\n        );\\n\\n        if (!success) {\\n            if (returnData.length == 0) revert(\\\"call reverted\\\");\\n            else\\n                assembly {\\n                    let returndata_size := mload(returnData)\\n                    revert(add(32, returnData), returndata_size)\\n                }\\n        }\\n    }\\n\\n    /// @notice Returns the balance of the wallet\\n    function getBalance() public view returns (uint256) {\\n        return walletValue;\\n    }\\n\\n    /// @notice Allows anyone to deposit ERC20 into this wallet.\\n    function deposit() public payable onlyOnce {\\n        uint256 value = (msg.value);\\n        require(value >= 0);\\n\\n        walletValue = walletValue + value;\\n        emit Deposit(msg.sender, value, walletValue);\\n    }\\n\\n    /// @notice Allows you to withdraw\\n    function withdraw() public onlyOnce onlyApproved {\\n        //to stop re-entry attack\\n        uint256 balance = (walletValue);\\n        walletValue = 0;\\n        payable(deployer).transfer(balance);\\n        emit Withdraw(msg.sender, address(this).balance, walletValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd4641689ba5aba3f410cbbda78414fa7d9896da3360731ac5b0d9ae057809e1d\",\"license\":\"UNLICENSED\"},\"contracts/IntegrityInterface.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\ninterface IntegrityInterface {\\n    /**\\n\\t\\t@notice Verifys that a deployed contract matches the one we want.\\n\\t */\\n    function getIntegrity()\\n        external\\n        returns (\\n            address from,\\n            address owner,\\n            uint256 tokenId,\\n            bytes memory versionType,\\n            bytes4 intefaceId\\n        );\\n}\\n\",\"keccak256\":\"0xb41d6cf1767e055b12a8a04a2af2f42797c9675fa47909964778106ef1971a4e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c0604052600660808190526515d85b1b195d60d21b60a0908152620000299160039190620000cc565b503480156200003757600080fd5b5060405162001097380380620010978339810160408190526200005a9162000172565b600080546001600160a01b03199081163390811783558252600260205260408220805460ff19166001908117909155829055600480546001600160a01b039490941663ffffffff909516600160a01b029091166001600160c01b03199093169290921792909217905560055562000201565b828054620000da90620001c4565b90600052602060002090601f016020900481019282620000fe576000855562000149565b82601f106200011957805160ff191683800117855562000149565b8280016001018555821562000149579182015b82811115620001495782518255916020019190600101906200012c565b50620001579291506200015b565b5090565b5b808211156200015757600081556001016200015c565b600080604083850312156200018657600080fd5b825163ffffffff811681146200019b57600080fd5b60208401519092506001600160a01b0381168114620001b957600080fd5b809150509250929050565b600181811c90821680620001d957607f821691505b60208210811415620001fb57634e487b7160e01b600052602260045260246000fd5b50919050565b610e8680620002116000396000f3fe6080604052600436106100c25760003560e01c80629a9b7b146100c757806310a8c7a91461010557806312065fe014610127578063150b7a02146101455780633ccfd60b1461018a5780635b648b0a1461019f57806388782c9c146101c1578063bca6ce64146101d6578063beabacc81461020e578063d0e30db01461022e578063d15d415014610236578063d49a2a7c14610266578063d5f39488146102c9578063d8b964e6146102e9578063f2fde38b14610319578063fe684c0e14610339575b600080fd5b3480156100d357600080fd5b506004546100eb90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b34801561011157600080fd5b50610125610120366004610a92565b610359565b005b34801561013357600080fd5b506005546040519081526020016100fc565b34801561015157600080fd5b50610171610160366004610b56565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100fc565b34801561019657600080fd5b506101256103f9565b3480156101ab57600080fd5b506101b46104f2565b6040516100fc9190610c50565b3480156101cd57600080fd5b50610125610580565b3480156101e257600080fd5b506004546101f6906001600160a01b031681565b6040516001600160a01b0390911681526020016100fc565b34801561021a57600080fd5b50610125610229366004610c6a565b6106f3565b610125610833565b34801561024257600080fd5b50610256610251366004610cab565b61089a565b60405190151581526020016100fc565b34801561027257600080fd5b506000546004546040805180820190915260068152651dd85b1b195d60d21b602082015230926001600160a01b031691600160a01b900463ffffffff16906335268a9f60e21b6040516100fc959493929190610cc8565b3480156102d557600080fd5b506000546101f6906001600160a01b031681565b3480156102f557600080fd5b50610256610304366004610cab565b60026020526000908152604090205460ff1681565b34801561032557600080fd5b50610125610334366004610cab565b6108d5565b34801561034557600080fd5b50610125610354366004610d16565b610975565b6000546001600160a01b0316331461038c5760405162461bcd60e51b815260040161038390610d54565b60405180910390fd5b805161039757600080fd5b60005b81518110156103f5576001600260008484815181106103bb576103bb610d7a565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161039a565b5050565b600180600082825461040b9190610d90565b90915550506001546000546001600160a01b031633148061043b57503360009081526002602052604090205460ff165b6104575760405162461bcd60e51b815260040161038390610db6565b60058054600091829055815460405191926001600160a01b039091169183156108fc0291849190818181858888f1935050505015801561049b573d6000803e3d6000fd5b5060055460405133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568916104d891478252602082015260400190565b60405180910390a25060015481146104ef57600080fd5b50565b600380546104ff90610ddc565b80601f016020809104026020016040519081016040528092919081815260200182805461052b90610ddc565b80156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b505050505081565b60018060008282546105929190610d90565b9091555050600154600480546040516331a9108f60e11b8152600160a01b820463ffffffff16928101929092526000916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106189190610e17565b6000549091506001600160a01b03808316911614156106845760405162461bcd60e51b815260206004820152602260248201527f6f776e6572206f662074686520746f6b656e20697320746865206465706c6f7960448201526132b960f11b6064820152608401610383565b336001600160a01b038216146106db5760405162461bcd60e51b815260206004820152601c60248201527b39b2b73232b91036bab9ba103132903a3432903732bb9037bbb732b960211b6044820152606401610383565b6106e4816108d5565b5060015481146104ef57600080fd5b6000546001600160a01b031633148061071b57503360009081526002602052604090205460ff165b6107375760405162461bcd60e51b815260040161038390610db6565b6040513060248201526001600160a01b038381166044830152606482018390526000918291861690829060840160408051601f198184030181529181526020820180516001600160e01b03166317d5759960e31b179052516107999190610e34565b60006040518083038185875af1925050503d80600081146107d6576040519150601f19603f3d011682016040523d82523d6000602084013e6107db565b606091505b50915091508161082c5780516108235760405162461bcd60e51b815260206004820152600d60248201526c18d85b1b081c995d995c9d1959609a1b6044820152606401610383565b80518082602001fd5b5050505050565b60018060008282546108459190610d90565b9091555050600154348060055461085c9190610d90565b600581905560405133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15916104d891858252602082015260400190565b600080546001600160a01b03838116911614806108cf57506001600160a01b03821660009081526002602052604090205460ff165b92915050565b6000546001600160a01b031633146108ff5760405162461bcd60e51b815260040161038390610d54565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b0316331461099f5760405162461bcd60e51b815260040161038390610d54565b6000546001600160a01b03838116911614156109f65760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610383565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104ef57600080fd5b8035610a8d81610a6d565b919050565b60006020808385031215610aa557600080fd5b82356001600160401b0380821115610abc57600080fd5b818501915085601f830112610ad057600080fd5b813581811115610ae257610ae2610a57565b8060051b604051601f19603f83011681018181108582111715610b0757610b07610a57565b604052918252848201925083810185019188831115610b2557600080fd5b938501935b82851015610b4a57610b3b85610a82565b84529385019392850192610b2a565b98975050505050505050565b600080600080600060808688031215610b6e57600080fd5b8535610b7981610a6d565b94506020860135610b8981610a6d565b93506040860135925060608601356001600160401b0380821115610bac57600080fd5b818801915088601f830112610bc057600080fd5b813581811115610bcf57600080fd5b896020828501011115610be157600080fd5b9699959850939650602001949392505050565b60005b83811015610c0f578181015183820152602001610bf7565b83811115610c1e576000848401525b50505050565b60008151808452610c3c816020860160208601610bf4565b601f01601f19169290920160200192915050565b602081526000610c636020830184610c24565b9392505050565b600080600060608486031215610c7f57600080fd5b8335610c8a81610a6d565b92506020840135610c9a81610a6d565b929592945050506040919091013590565b600060208284031215610cbd57600080fd5b8135610c6381610a6d565b6001600160a01b038681168252851660208201526040810184905260a060608201819052600090610cfb90830185610c24565b905063ffffffff60e01b831660808301529695505050505050565b60008060408385031215610d2957600080fd5b8235610d3481610a6d565b915060208301358015158114610d4957600080fd5b809150509250929050565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60008219821115610db157634e487b7160e01b600052601160045260246000fd5b500190565b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b600181811c90821680610df057607f821691505b60208210811415610e1157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610e2957600080fd5b8151610c6381610a6d565b60008251610e46818460208701610bf4565b919091019291505056fea264697066735822122018751f01069333995d4a9f591735f4e8791b301a20caa880b995d334f286d58e64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80629a9b7b146100c757806310a8c7a91461010557806312065fe014610127578063150b7a02146101455780633ccfd60b1461018a5780635b648b0a1461019f57806388782c9c146101c1578063bca6ce64146101d6578063beabacc81461020e578063d0e30db01461022e578063d15d415014610236578063d49a2a7c14610266578063d5f39488146102c9578063d8b964e6146102e9578063f2fde38b14610319578063fe684c0e14610339575b600080fd5b3480156100d357600080fd5b506004546100eb90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b34801561011157600080fd5b50610125610120366004610a92565b610359565b005b34801561013357600080fd5b506005546040519081526020016100fc565b34801561015157600080fd5b50610171610160366004610b56565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016100fc565b34801561019657600080fd5b506101256103f9565b3480156101ab57600080fd5b506101b46104f2565b6040516100fc9190610c50565b3480156101cd57600080fd5b50610125610580565b3480156101e257600080fd5b506004546101f6906001600160a01b031681565b6040516001600160a01b0390911681526020016100fc565b34801561021a57600080fd5b50610125610229366004610c6a565b6106f3565b610125610833565b34801561024257600080fd5b50610256610251366004610cab565b61089a565b60405190151581526020016100fc565b34801561027257600080fd5b506000546004546040805180820190915260068152651dd85b1b195d60d21b602082015230926001600160a01b031691600160a01b900463ffffffff16906335268a9f60e21b6040516100fc959493929190610cc8565b3480156102d557600080fd5b506000546101f6906001600160a01b031681565b3480156102f557600080fd5b50610256610304366004610cab565b60026020526000908152604090205460ff1681565b34801561032557600080fd5b50610125610334366004610cab565b6108d5565b34801561034557600080fd5b50610125610354366004610d16565b610975565b6000546001600160a01b0316331461038c5760405162461bcd60e51b815260040161038390610d54565b60405180910390fd5b805161039757600080fd5b60005b81518110156103f5576001600260008484815181106103bb576103bb610d7a565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161039a565b5050565b600180600082825461040b9190610d90565b90915550506001546000546001600160a01b031633148061043b57503360009081526002602052604090205460ff165b6104575760405162461bcd60e51b815260040161038390610db6565b60058054600091829055815460405191926001600160a01b039091169183156108fc0291849190818181858888f1935050505015801561049b573d6000803e3d6000fd5b5060055460405133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568916104d891478252602082015260400190565b60405180910390a25060015481146104ef57600080fd5b50565b600380546104ff90610ddc565b80601f016020809104026020016040519081016040528092919081815260200182805461052b90610ddc565b80156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b505050505081565b60018060008282546105929190610d90565b9091555050600154600480546040516331a9108f60e11b8152600160a01b820463ffffffff16928101929092526000916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106189190610e17565b6000549091506001600160a01b03808316911614156106845760405162461bcd60e51b815260206004820152602260248201527f6f776e6572206f662074686520746f6b656e20697320746865206465706c6f7960448201526132b960f11b6064820152608401610383565b336001600160a01b038216146106db5760405162461bcd60e51b815260206004820152601c60248201527b39b2b73232b91036bab9ba103132903a3432903732bb9037bbb732b960211b6044820152606401610383565b6106e4816108d5565b5060015481146104ef57600080fd5b6000546001600160a01b031633148061071b57503360009081526002602052604090205460ff165b6107375760405162461bcd60e51b815260040161038390610db6565b6040513060248201526001600160a01b038381166044830152606482018390526000918291861690829060840160408051601f198184030181529181526020820180516001600160e01b03166317d5759960e31b179052516107999190610e34565b60006040518083038185875af1925050503d80600081146107d6576040519150601f19603f3d011682016040523d82523d6000602084013e6107db565b606091505b50915091508161082c5780516108235760405162461bcd60e51b815260206004820152600d60248201526c18d85b1b081c995d995c9d1959609a1b6044820152606401610383565b80518082602001fd5b5050505050565b60018060008282546108459190610d90565b9091555050600154348060055461085c9190610d90565b600581905560405133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15916104d891858252602082015260400190565b600080546001600160a01b03838116911614806108cf57506001600160a01b03821660009081526002602052604090205460ff165b92915050565b6000546001600160a01b031633146108ff5760405162461bcd60e51b815260040161038390610d54565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b0316331461099f5760405162461bcd60e51b815260040161038390610d54565b6000546001600160a01b03838116911614156109f65760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610383565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104ef57600080fd5b8035610a8d81610a6d565b919050565b60006020808385031215610aa557600080fd5b82356001600160401b0380821115610abc57600080fd5b818501915085601f830112610ad057600080fd5b813581811115610ae257610ae2610a57565b8060051b604051601f19603f83011681018181108582111715610b0757610b07610a57565b604052918252848201925083810185019188831115610b2557600080fd5b938501935b82851015610b4a57610b3b85610a82565b84529385019392850192610b2a565b98975050505050505050565b600080600080600060808688031215610b6e57600080fd5b8535610b7981610a6d565b94506020860135610b8981610a6d565b93506040860135925060608601356001600160401b0380821115610bac57600080fd5b818801915088601f830112610bc057600080fd5b813581811115610bcf57600080fd5b896020828501011115610be157600080fd5b9699959850939650602001949392505050565b60005b83811015610c0f578181015183820152602001610bf7565b83811115610c1e576000848401525b50505050565b60008151808452610c3c816020860160208601610bf4565b601f01601f19169290920160200192915050565b602081526000610c636020830184610c24565b9392505050565b600080600060608486031215610c7f57600080fd5b8335610c8a81610a6d565b92506020840135610c9a81610a6d565b929592945050506040919091013590565b600060208284031215610cbd57600080fd5b8135610c6381610a6d565b6001600160a01b038681168252851660208201526040810184905260a060608201819052600090610cfb90830185610c24565b905063ffffffff60e01b831660808301529695505050505050565b60008060408385031215610d2957600080fd5b8235610d3481610a6d565b915060208301358015158114610d4957600080fd5b809150509250929050565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60008219821115610db157634e487b7160e01b600052601160045260246000fd5b500190565b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b600181811c90821680610df057607f821691505b60208210811415610e1157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610e2957600080fd5b8151610c6381610a6d565b60008251610e46818460208701610bf4565b919091019291505056fea264697066735822122018751f01069333995d4a9f591735f4e8791b301a20caa880b995d334f286d58e64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "makes the owner field the owner of the contract not the deployer.",
        "params": {
          "erc721Destination": "the main ERC721 contract",
          "tokenId": "the tokenId from the main ERC721 contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256,uint256)": {
        "notice": "Fired when a deposit is made"
      },
      "Withdraw(address,uint256,uint256)": {
        "notice": "Fired with a withdraw is made"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates new wallet contract, tokenId refers to the ERC721 contract this wallet was spawned from."
      },
      "currentTokenId()": {
        "notice": "the main ERC721 contract this wallet is attached too"
      },
      "deposit()": {
        "notice": "Allows anyone to deposit ERC20 into this wallet."
      },
      "erc721()": {
        "notice": "the location of the main ERC721 contract this wallet was spawned from;"
      },
      "getBalance()": {
        "notice": "Returns the balance of the wallet"
      },
      "getIntegrity()": {
        "notice": "used by InfinityMintLinker to verify this contract is the one it says"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Opts in this contract to receipt ERC721"
      },
      "transferOwnershipToTokenOwner()": {
        "notice": "This can be called by the new token owner at any time and it will match the current owner of the contract to the tokenId, in all cases the wallet will still be attached to the owner of the tokenId and when its not it will simply move over permissions of the contract to the new owner"
      },
      "walletType()": {
        "notice": "the version type of wallet this is"
      },
      "withdraw()": {
        "notice": "Allows you to withdraw"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 458,
        "contract": "contracts/InfinityMintWallet.sol:InfinityMintWallet",
        "label": "deployer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 461,
        "contract": "contracts/InfinityMintWallet.sol:InfinityMintWallet",
        "label": "executionCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/InfinityMintWallet.sol:InfinityMintWallet",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7237,
        "contract": "contracts/InfinityMintWallet.sol:InfinityMintWallet",
        "label": "walletType",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 7240,
        "contract": "contracts/InfinityMintWallet.sol:InfinityMintWallet",
        "label": "erc721",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7243,
        "contract": "contracts/InfinityMintWallet.sol:InfinityMintWallet",
        "label": "currentTokenId",
        "offset": 20,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 7246,
        "contract": "contracts/InfinityMintWallet.sol:InfinityMintWallet",
        "label": "walletValue",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}