{
  "address": "0xa71CB00ceBdb6Aa319cCA14DC63BD7B752B03fe8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "seedNumber",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxNumber",
          "type": "uint256"
        }
      ],
      "name": "getMaxNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasDeployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomnessFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        }
      ],
      "name": "returnNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe6cc11a56d592d70e13f1ca25217fac8738abaff9aaa9fa67b98591ba94f478",
  "receipt": {
    "to": null,
    "from": "0x527738Dd42170065d778C89264654b03f8Ed989B",
    "contractAddress": "0xa71CB00ceBdb6Aa319cCA14DC63BD7B752B03fe8",
    "transactionIndex": 42,
    "gasUsed": "325029",
    "logsBloom": "0x
    "blockHash": "0x2e9e2d67728e4f887fc06bdf712001d1b2973586d450d4ef17062d5d70aeed5a",
    "transactionHash": "0xfe6cc11a56d592d70e13f1ca25217fac8738abaff9aaa9fa67b98591ba94f478",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 39045843,
        "transactionHash": "0xfe6cc11a56d592d70e13f1ca25217fac8738abaff9aaa9fa67b98591ba94f478",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000527738dd42170065d778c89264654b03f8ed989b",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000030970453986f330000000000000000000000000000000000000000000000003b613c01ecb436620000000000000000000000000000000000000000000000d8e38157de10dab36c0000000000000000000000000000000000000000000000003b30a4fd991bc72f0000000000000000000000000000000000000000000000d8e3b1eee26473229f",
        "logIndex": 156,
        "blockHash": "0x2e9e2d67728e4f887fc06bdf712001d1b2973586d450d4ef17062d5d70aeed5a"
      }
    ],
    "blockNumber": 39045843,
    "cumulativeGasUsed": "6641955",
    "status": 1,
    "byzantium": true
  },
  "args": [
    256,
    "0x2d65a808DBB7F6fF5d7815F7c0D26cb0B7d8149e"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f3f5743d043d6d0147204e57adad5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"seedNumber\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumber\",\"type\":\"uint256\"}],\"name\":\"getMaxNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomnessFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"returnNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"returnNumber(uint256,uint256)\":{\"notice\":\"cheap return number\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/random/UnsafeRandom.sol\":\"UnsafeRandom\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert(\\\"Invalid Value\\\");\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0xa3df569a4c7a710808d576eb4608fd23656a38ab04fb2288a5cc341d9d65c78a\",\"license\":\"UNLICENSED\"},\"contracts/RandomNumber.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InfinityMintValues.sol\\\";\\n\\n/// @title InfinityMint Random Number Abstract Contract\\n/// @author Llydia Cross\\nabstract contract RandomNumber {\\n    uint256 public randomnessFactor;\\n    bool public hasDeployed = false;\\n    uint256 public salt = 1;\\n\\n    InfinityMintValues internal valuesController;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        randomnessFactor = valuesController.getValue(\\\"randomessFactor\\\");\\n    }\\n\\n    function getNumber() external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(valuesController.getValue(\\\"maxRandomNumber\\\"), salt);\\n    }\\n\\n    function getMaxNumber(uint256 maxNumber) external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(maxNumber, salt);\\n    }\\n\\n    /// @notice cheap return number\\n    function returnNumber(uint256 maxNumber, uint256 _salt)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (maxNumber <= 0) maxNumber = 1;\\n        return (_salt + 3) % maxNumber;\\n    }\\n}\\n\",\"keccak256\":\"0xb6626181ed123ae8432c02ec7c68a2edc982f08ede6e71917656524aa9211d57\",\"license\":\"UNLICENSED\"},\"contracts/random/UnsafeRandom.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n//SafeMath Contract\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../RandomNumber.sol\\\";\\n\\ncontract UnsafeRandom is RandomNumber {\\n    uint256 internal numberSeed = 12456789;\\n\\n    constructor(uint32 seedNumber, address valuesContract)\\n        RandomNumber(valuesContract)\\n    {\\n        numberSeed = seedNumber;\\n    }\\n\\n    function returnNumber(uint256 maxNumber, uint256 _salt)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (maxNumber <= 0) maxNumber = 1;\\n        uint256 c = uint256(\\n            keccak256(\\n                abi.encode(\\n                    numberSeed,\\n                    _salt,\\n                    maxNumber,\\n                    block.difficulty,\\n                    block.number,\\n                    block.timestamp,\\n                    msg.sender, //is this contract or who ever calls this\\n                    randomnessFactor\\n                )\\n            )\\n        );\\n\\n        (bool safe, uint256 result) = SafeMath.tryMod(c, maxNumber);\\n\\n        if (safe) return result;\\n\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe919107052aa88f6c03bd68f83183a793e6091c71760dea28101cd2e7a665bad\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff1916815560025562be135560045534801561002457600080fd5b5060405161046f38038061046f833981016040819052610043916100f4565b600380546001600160a01b0319166001600160a01b0383169081179091556040516304b01c2560e51b815260206004820152600f60248201526e3930b73237b6b2b9b9a330b1ba37b960891b604482015282919063960384a090606401602060405180830381865afa1580156100bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e19190610143565b600055505063ffffffff1660045561015c565b6000806040838503121561010757600080fd5b825163ffffffff8116811461011b57600080fd5b60208401519092506001600160a01b038116811461013857600080fd5b809150509250929050565b60006020828403121561015557600080fd5b5051919050565b6103048061016b6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806307aaf42d146100675780634b0c7aad14610089578063a0d0ca0f146100aa578063bfa0b133146100bd578063ceb42337146100c6578063f2c9ecd8146100cf575b600080fd5b6001546100749060ff1681565b60405190151581526020015b60405180910390f35b61009c610097366004610264565b6100d7565b604051908152602001610080565b61009c6100b8366004610286565b610171565b61009c60025481565b61009c60005481565b61009c61018a565b60008083116100e557600192505b600454600080546040805160208101949094528301859052606083018690524460808401524360a08401524260c08401523360e084015261010083015290610120016040516020818303038152906040528051906020012060001c905060008061014f8387610233565b91509150811561016357925061016b915050565b600093505050505b92915050565b600280546001019081905560009061016b9083906100d7565b6002805460010190556003546040516304b01c2560e51b815260206004820152600f60248201526e36b0bc2930b73237b6a73ab6b132b960891b604482015260009161022e916001600160a01b039091169063960384a090606401602060405180830381865afa158015610202573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610226919061029f565b6002546100d7565b905090565b600080826102465750600090508061025d565b6001838581610257576102576102b8565b06915091505b9250929050565b6000806040838503121561027757600080fd5b50508035926020909101359150565b60006020828403121561029857600080fd5b5035919050565b6000602082840312156102b157600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220d3ed90d65b1b019ca40dd56b6268b8338778e9841f470c61deef5a81fa4d34d964736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806307aaf42d146100675780634b0c7aad14610089578063a0d0ca0f146100aa578063bfa0b133146100bd578063ceb42337146100c6578063f2c9ecd8146100cf575b600080fd5b6001546100749060ff1681565b60405190151581526020015b60405180910390f35b61009c610097366004610264565b6100d7565b604051908152602001610080565b61009c6100b8366004610286565b610171565b61009c60025481565b61009c60005481565b61009c61018a565b60008083116100e557600192505b600454600080546040805160208101949094528301859052606083018690524460808401524360a08401524260c08401523360e084015261010083015290610120016040516020818303038152906040528051906020012060001c905060008061014f8387610233565b91509150811561016357925061016b915050565b600093505050505b92915050565b600280546001019081905560009061016b9083906100d7565b6002805460010190556003546040516304b01c2560e51b815260206004820152600f60248201526e36b0bc2930b73237b6a73ab6b132b960891b604482015260009161022e916001600160a01b039091169063960384a090606401602060405180830381865afa158015610202573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610226919061029f565b6002546100d7565b905090565b600080826102465750600090508061025d565b6001838581610257576102576102b8565b06915091505b9250929050565b6000806040838503121561027757600080fd5b50508035926020909101359150565b60006020828403121561029857600080fd5b5035919050565b6000602082840312156102b157600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220d3ed90d65b1b019ca40dd56b6268b8338778e9841f470c61deef5a81fa4d34d964736f6c634300080c0033",
  "libraries": {
    "InfinityMintUtil": "0xd7fcAa6A3e68e4eDAb6eA551594cF60CCe436F73"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "returnNumber(uint256,uint256)": {
        "notice": "cheap return number"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8006,
        "contract": "contracts/random/UnsafeRandom.sol:UnsafeRandom",
        "label": "randomnessFactor",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8009,
        "contract": "contracts/random/UnsafeRandom.sol:UnsafeRandom",
        "label": "hasDeployed",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8012,
        "contract": "contracts/random/UnsafeRandom.sol:UnsafeRandom",
        "label": "salt",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8015,
        "contract": "contracts/random/UnsafeRandom.sol:UnsafeRandom",
        "label": "valuesController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(InfinityMintValues)7222"
      },
      {
        "astId": 14545,
        "contract": "contracts/random/UnsafeRandom.sol:UnsafeRandom",
        "label": "numberSeed",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InfinityMintValues)7222": {
        "encoding": "inplace",
        "label": "contract InfinityMintValues",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}