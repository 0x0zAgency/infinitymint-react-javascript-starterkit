{
  "address": "0xda6edBB56D7DfC282FA7DbEA658239801D579c1B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "storageContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "randomNumberContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PermissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferedOwnership",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetController",
      "outputs": [
        {
          "internalType": "contract Asset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getPreview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "previewCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAuthenticated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentTokenId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "destinations",
              "type": "address[]"
            }
          ],
          "internalType": "struct InfinityMintObject.InfinityObject",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "mintPreview",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "currentTokenId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "destinations",
              "type": "address[]"
            }
          ],
          "internalType": "struct InfinityMintObject.InfinityObject",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomNumberController",
      "outputs": [
        {
          "internalType": "contract RandomNumber",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        }
      ],
      "name": "setAssetController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPrivilages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "randomNumberContract",
          "type": "address"
        }
      ],
      "name": "setRandomNumberController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storageContract",
          "type": "address"
        }
      ],
      "name": "setStorageController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageController",
      "outputs": [
        {
          "internalType": "contract InfinityMintStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valuesController",
      "outputs": [
        {
          "internalType": "contract InfinityMintValues",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25854aaab1b41cd7e24e18b16e713d32abf46c64725c504a3bb4ea41d3b87721",
  "receipt": {
    "to": null,
    "from": "0x527738Dd42170065d778C89264654b03f8Ed989B",
    "contractAddress": "0xda6edBB56D7DfC282FA7DbEA658239801D579c1B",
    "transactionIndex": 97,
    "gasUsed": "1658992",
    "logsBloom": "0x
    "blockHash": "0xa56982e97119090e1863f8874d20398af232c0fd8b71e33d9f54730cd01997b4",
    "transactionHash": "0x25854aaab1b41cd7e24e18b16e713d32abf46c64725c504a3bb4ea41d3b87721",
    "logs": [
      {
        "transactionIndex": 97,
        "blockNumber": 39045850,
        "transactionHash": "0x25854aaab1b41cd7e24e18b16e713d32abf46c64725c504a3bb4ea41d3b87721",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000527738dd42170065d778c89264654b03f8ed989b",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016a4eb9c9dd7c300000000000000000000000000000000000000000000000003a894c88ea7db0620000000000000000000000000000000000000000000000d933d848703b03f8d6000000000000000000000000000000000000000000000000391efdcf20a034320000000000000000000000000000000000000000000000d93542972a04e17506",
        "logIndex": 426,
        "blockHash": "0xa56982e97119090e1863f8874d20398af232c0fd8b71e33d9f54730cd01997b4"
      }
    ],
    "blockNumber": 39045850,
    "cumulativeGasUsed": "20986864",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2d65a808DBB7F6fF5d7815F7c0D26cb0B7d8149e",
    "0x253d9d729f6e775E283fEbf4Fc1329d43Da5f0Ac",
    "0x5e42832B838fdE0E2225FdA02400b4dFff8a6EC8",
    "0xa71CB00ceBdb6Aa319cCA14DC63BD7B752B03fe8"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f3f5743d043d6d0147204e57adad5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storageContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomNumberContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferedOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetController\",\"outputs\":[{\"internalType\":\"contract Asset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"previewCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"internalType\":\"struct InfinityMintObject.InfinityObject\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"mintPreview\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"internalType\":\"struct InfinityMintObject.InfinityObject\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumberController\",\"outputs\":[{\"internalType\":\"contract RandomNumber\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"}],\"name\":\"setAssetController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPrivilages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomNumberContract\",\"type\":\"address\"}],\"name\":\"setRandomNumberController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageContract\",\"type\":\"address\"}],\"name\":\"setStorageController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageController\",\"outputs\":[{\"internalType\":\"contract InfinityMintStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuesController\",\"outputs\":[{\"internalType\":\"contract InfinityMintValues\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/minter/DefaultMinter.sol\":\"DefaultMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/Asset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RandomNumber.sol\\\";\\n\\nabstract contract Asset {\\n    struct PartialStruct {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32[] assets;\\n        string[] names;\\n        uint32[] colours;\\n        bytes mintData;\\n    }\\n\\n    function getColours(uint32 pathId, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32[] memory result);\\n\\n    function getDefaultName() internal virtual returns (string memory);\\n\\n    function getNextPath() external view virtual returns (uint32);\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function isValidPath(uint32 pathId) external view virtual returns (bool);\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function setLastAssets(uint32[] memory assets) public virtual;\\n\\n    function getNames(uint256 nameCount, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (string[] memory results);\\n\\n    function getRandomAsset(uint32 pathId, RandomNumber randomNumberController)\\n        external\\n        virtual\\n        returns (uint32[] memory assetsId);\\n\\n    function getMintData(\\n        uint32 pathId,\\n        uint32 tokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (bytes memory);\\n\\n    function addAsset(uint256 rarity) public virtual;\\n\\n    function setNextPathId(uint32 pathId) public virtual;\\n\\n    function setLastPathId(uint32 pathId) public virtual;\\n\\n    function getPathSize(uint32 pathId) public view virtual returns (uint32);\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0x2552f3763dbab53a663753b004eefcd370ffbba0e6d9019d463255ab1bff1c39\",\"license\":\"UNLICENSED\"},\"contracts/Authentication.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InfinityMintObject.sol\\\";\\n\\nabstract contract Authentication {\\n    address public deployer;\\n    /// @notice for re-entry prevention, keeps track of a methods execution count\\n    uint256 private executionCount;\\n\\n    mapping(address => bool) public approved;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n        approved[msg.sender] = true;\\n        executionCount = 0;\\n    }\\n\\n    event PermissionChange(\\n        address indexed sender,\\n        address indexed changee,\\n        bool value\\n    );\\n\\n    event TransferedOwnership(address indexed from, address indexed to);\\n\\n    /// @notice Limits execution of a method to once in the given context.\\n    /// @dev prevents re-entry attack\\n    modifier onlyOnce() {\\n        executionCount += 1;\\n        uint256 localCounter = executionCount;\\n        _;\\n        require(localCounter == executionCount);\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(deployer == msg.sender, \\\"not deployer\\\");\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(deployer == msg.sender || approved[msg.sender], \\\"not approved\\\");\\n        _;\\n    }\\n\\n    function setPrivilages(address addr, bool value) public onlyDeployer {\\n        require(addr != deployer, \\\"cannot modify deployer\\\");\\n        approved[addr] = value;\\n\\n        emit PermissionChange(msg.sender, addr, value);\\n    }\\n\\n    function multiApprove(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isAuthenticated(address addr) external view returns (bool) {\\n        return addr == deployer || approved[addr];\\n    }\\n\\n    function transferOwnership(address addr) public onlyDeployer {\\n        approved[deployer] = false;\\n        deployer = addr;\\n        approved[addr] = true;\\n\\n        emit TransferedOwnership(msg.sender, addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0895e5e3736b655a297268b47327827b4de3b5a561af0ee25fca784bdf2d70d1\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintObject.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\n//this is implemented by every contract in our system\\nimport \\\"./InfinityMintUtil.sol\\\";\\nimport \\\"./InfinityMintValues.sol\\\";\\n\\nabstract contract InfinityMintObject {\\n    /// @notice The main InfinityMint object, TODO: Work out a way for this to easily be modified\\n    struct InfinityObject {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32 currentTokenId;\\n        address owner;\\n        uint32[] colours;\\n        bytes mintData;\\n        uint32[] assets;\\n        string[] names;\\n        address[] destinations;\\n    }\\n\\n    /// @notice Creates a new struct from arguments\\n    /// @dev Stickers are not set through this, structs cannot be made with sticker contracts already set and have to be set manually\\n    /// @param currentTokenId the tokenId,\\n    /// @param pathId the infinity mint paths id\\n    /// @param pathSize the size of the path (only for vectors)\\n    /// @param assets the assets which make up the token\\n    /// @param names the names of the token, its just the name but split by the splaces.\\n    /// @param colours decimal colours which will be convered to hexadecimal colours\\n    /// @param mintData variable dynamic field which is passed to ERC721 Implementor contracts and used in a lot of dynamic stuff\\n    /// @param _sender aka the owner of the token\\n    /// @param destinations a list of contracts associated with this token\\n    function createInfinityObject(\\n        uint32 currentTokenId,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory assets,\\n        string[] memory names,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        address _sender,\\n        address[] memory destinations\\n    ) internal pure returns (InfinityObject memory) {\\n        return\\n            InfinityObject(\\n                pathId,\\n                pathSize,\\n                currentTokenId,\\n                _sender, //the sender aka owner\\n                colours,\\n                mintData,\\n                assets,\\n                names,\\n                destinations\\n            );\\n    }\\n\\n    /// @notice basically unpacks a return object into bytes.\\n    function encode(InfinityObject memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                data.pathId,\\n                data.pathSize,\\n                data.currentTokenId,\\n                data.owner,\\n                abi.encode(data.colours),\\n                data.mintData,\\n                data.assets,\\n                data.names,\\n                data.destinations\\n            );\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function value() internal view returns (uint256) {\\n        return (msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xe47b88d98889304cc2e47c41a78ef5534d33ad9548970524f3b72390d7e08e3a\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintStorage.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InfinityMintObject.sol\\\";\\nimport \\\"./Authentication.sol\\\";\\n\\n/// @title InfinityMint storage controller\\n/// @author Llydia Cross\\n/// @notice Stores the outcomes of the mint process and previews and also unlock keys\\n/// @dev Attached to to an InfinityMint\\ncontract InfinityMintStorage is Authentication, InfinityMintObject {\\n    /// @notice previews\\n    mapping(address => mapping(uint256 => InfinityObject)) public previews;\\n    /// @notice previews timestamps of when new previews can be made\\n    mapping(address => uint256) public previewTimestamp;\\n    /// @notice all of the token data\\n    mapping(uint32 => InfinityObject) private tokens;\\n    /// @notice Address flags can be toggled and effect all of the tokens\\n    mapping(address => mapping(string => bool)) private flags;\\n    /// @notice a list of tokenFlags associated with the token\\n    mapping(uint256 => mapping(string => bool)) public tokenFlags;\\n    /// @notice a list of options\\n    mapping(address => mapping(string => string)) private options;\\n    /// @notice private mapping holding a list of tokens for owned by the address for quick look up\\n    mapping(address => uint32[]) private registeredTokens;\\n\\n    /// @notice returns true if the address is preview blocked and unable to receive more previews\\n    function getPreviewTimestamp(address addr) external view returns (uint256) {\\n        return previewTimestamp[addr];\\n    }\\n\\n    /// @notice sets a time in the future they an have more previews\\n    function setPreviewTimestamp(address addr, uint256 timestamp)\\n        public\\n        onlyApproved\\n    {\\n        require(timestamp > block.timestamp, \\\"timestamp must be in the future\\\");\\n        previewTimestamp[addr] = timestamp;\\n    }\\n\\n    /**\\n\\t\\t@notice Returns true if address in destinations array is valid,\\n\\t\\tdestinations array is managed by InfinityMintLinker and i used to associate contract destinations on chain with a token\\n\\t*/\\n    function hasDestinaton(uint32 tokenId, uint256 index)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            tokens[tokenId].destinations.length < index &&\\n            tokens[tokenId].destinations[index] != address(0x0);\\n    }\\n\\n    /// @notice Allows those approved with the contract to directly force a token flag. The idea is a seperate contract would control immutable this way\\n    /// @dev NOTE: This can only be called by contracts to curb rugging potential\\n    function forceTokenFlag(\\n        uint256 tokenId,\\n        string memory _flag,\\n        bool position\\n    ) public onlyApproved {\\n        tokenFlags[tokenId][_flag] = position;\\n    }\\n\\n    //// @notice Allows the current token owner to toggle a flag on the token, for instance, locked flag being true will mean token cannot be transfered\\n    function setTokenFlag(\\n        uint256 tokenId,\\n        string memory _flag,\\n        bool position\\n    ) public onlyApproved {\\n        require(this.flag(tokenId, \\\"immutable\\\") != true, \\\"token is immutable\\\");\\n        require(\\n            !InfinityMintUtil.isEqual(bytes(_flag), \\\"immutable\\\"),\\n            \\\"token immutable/mutable state cannot be modified this way for security reasons\\\"\\n        );\\n        tokenFlags[tokenId][_flag] = position;\\n    }\\n\\n    /// @notice returns the value of a flag\\n    function flag(uint256 tokenId, string memory _flag)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return tokenFlags[tokenId][_flag];\\n    }\\n\\n    /// @notice sets an option for a users tokens\\n    /// @dev this is used for instance inside of tokenURI\\n    function setOption(\\n        address addr,\\n        string memory key,\\n        string memory option\\n    ) public onlyApproved {\\n        options[addr][key] = option;\\n    }\\n\\n    /// @notice deletes an option\\n    function deleteOption(address addr, string memory key) public onlyApproved {\\n        delete options[addr][key];\\n    }\\n\\n    /// @notice returns a global option for all the addresses tokens\\n    function getOption(address addr, string memory key)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return options[addr][key];\\n    }\\n\\n    //// @notice Allows the current token owner to toggle a flag on the token, for instance, locked flag being true will mean token cannot be transfered\\n    function setFlag(\\n        address addr,\\n        string memory _flag,\\n        bool position\\n    ) public onlyApproved {\\n        flags[addr][_flag] = position;\\n    }\\n\\n    function tokenFlag(uint32 tokenId, string memory _flag)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return tokenFlags[tokenId][_flag];\\n    }\\n\\n    function validDestination(uint32 tokenId, uint256 index)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return (tokens[tokenId].owner != address(0x0) &&\\n            tokens[tokenId].destinations.length != 0 &&\\n            index < tokens[tokenId].destinations.length &&\\n            tokens[tokenId].destinations[index] != address(0x0));\\n    }\\n\\n    /// @notice returns the value of a flag\\n    function flag(address addr, string memory _flag)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return flags[addr][_flag];\\n    }\\n\\n    /// @notice returns address of the owner of this token\\n    /// @param tokenId the tokenId to get the owner of\\n    function getOwner(uint32 tokenId) public view returns (address) {\\n        return tokens[tokenId].owner;\\n    }\\n\\n    /// @notice returns an integer array containing the token ids owned by the owner address\\n    /// @dev NOTE: This will only track 256 tokens\\n    /// @param owner the owner to look for\\n    function getAllRegisteredTokens(address owner)\\n        public\\n        view\\n        returns (uint32[] memory)\\n    {\\n        return registeredTokens[owner];\\n    }\\n\\n    /// @notice this method adds a tokenId from the registered tokens list which is kept for the owner. these methods are designed to allow limited data retrival functionality on local host environments\\n    /// @dev for local testing purposes mostly, to make it scalable the length is capped to 128. Tokens should be indexed by web2 server not on chain.\\n    /// @param owner the owner to add the token too\\n    /// @param tokenId the tokenId to add\\n    function addToRegisteredTokens(address owner, uint32 tokenId)\\n        public\\n        onlyApproved\\n    {\\n        //if the l\\n        if (registeredTokens[owner].length < 256)\\n            registeredTokens[owner].push(tokenId);\\n    }\\n\\n    /// @notice Gets the amount of registered tokens\\n    /// @dev Tokens are indexable instead by their current positon inside of the owner wallets collection, returns a tokenId\\n    /// @param owner the owner to get the length of\\n    function getRegisteredTokenCount(address owner)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return registeredTokens[owner].length;\\n    }\\n\\n    /// @notice returns a token\\n    /// @dev returns an InfinityObject defined in {InfinityMintObject}\\n    /// @param tokenId the tokenId to get\\n    function get(uint32 tokenId) public view returns (InfinityObject memory) {\\n        if (tokens[tokenId].owner == address(0x0)) revert(\\\"invalid token\\\");\\n\\n        return tokens[tokenId];\\n    }\\n\\n    /// @notice Sets the owner field in the token to another value\\n    function transfer(address to, uint32 tokenId) public onlyApproved {\\n        //set to new owner\\n        tokens[tokenId].owner = to;\\n    }\\n\\n    function set(uint32 tokenId, InfinityObject memory data)\\n        public\\n        onlyApproved\\n    {\\n        require(data.owner != address(0x0), \\\"null owner\\\");\\n        require(data.currentTokenId == tokenId, \\\"tokenID mismatch\\\");\\n        tokens[tokenId] = data;\\n    }\\n\\n    /// @notice use normal set when can because of the checks it does before the set, this does no checks\\n    function setUnsafe(uint32 tokenId, bytes memory data) public onlyApproved {\\n        tokens[tokenId] = abi.decode(data, (InfinityObject));\\n    }\\n\\n    function setPreview(\\n        address owner,\\n        uint256 index,\\n        InfinityObject memory data\\n    ) public onlyApproved {\\n        previews[owner][index] = data;\\n    }\\n\\n    function getPreviewAt(address owner, uint256 index)\\n        external\\n        view\\n        returns (InfinityObject memory)\\n    {\\n        require(\\n            previews[owner][index].owner != address(0x0),\\n            \\\"invalid preview\\\"\\n        );\\n\\n        return previews[owner][index];\\n    }\\n\\n    function findPreviews(address owner, uint256 previewCount)\\n        public\\n        view\\n        onlyApproved\\n        returns (InfinityObject[] memory)\\n    {\\n        InfinityObject[] memory temp = new InfinityObject[](previewCount);\\n        for (uint256 i = 0; i < previewCount; ) {\\n            temp[i] = previews[owner][i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return temp;\\n    }\\n\\n    function deletePreview(address owner, uint256 previewCount)\\n        public\\n        onlyApproved\\n    {\\n        for (uint256 i = 0; i < previewCount; ) {\\n            delete previews[owner][i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        delete previewTimestamp[owner];\\n    }\\n\\n    /// @notice this method deletes a tokenId from the registered tokens list which is kept for the owner. these methods are designed to allow limited data retrival functionality on local host environments\\n    /// @dev only works up to 256 entrys, not scalable\\n    function deleteFromRegisteredTokens(address sender, uint32 tokenId)\\n        public\\n        onlyApproved\\n    {\\n        if (registeredTokens[sender].length - 1 <= 0) {\\n            registeredTokens[sender] = new uint32[](0);\\n            return;\\n        }\\n\\n        uint32[] memory newArray = new uint32[](\\n            registeredTokens[sender].length - 1\\n        );\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < registeredTokens[sender].length; ) {\\n            if (index == newArray.length) break;\\n            if (tokenId == registeredTokens[sender][i]) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            newArray[index++] = registeredTokens[sender][i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        registeredTokens[sender] = newArray;\\n    }\\n}\\n\",\"keccak256\":\"0x3c1401166b6d2c80cb38baa043f76bebb446a78b90f85c2a635b5ea09652bde4\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintUtil.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nlibrary InfinityMintUtil {\\n    function toString(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function filepath(\\n        string memory directory,\\n        string memory file,\\n        string memory extension\\n    ) internal pure returns (string memory) {\\n        return\\n            abi.decode(abi.encodePacked(directory, file, extension), (string));\\n    }\\n\\n    //checks if two strings (or bytes) are equal\\n    function isEqual(bytes memory s1, bytes memory s2)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory b1 = bytes(s1);\\n        bytes memory b2 = bytes(s2);\\n        uint256 l1 = b1.length;\\n        if (l1 != b2.length) return false;\\n        for (uint256 i = 0; i < l1; i++) {\\n            //check each byte\\n            if (b1[i] != b2[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x414a2931293db93950726b75c54b8083051b1004291fd70bac069ad5d769bc53\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert(\\\"Invalid Value\\\");\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0xa3df569a4c7a710808d576eb4608fd23656a38ab04fb2288a5cc341d9d65c78a\",\"license\":\"UNLICENSED\"},\"contracts/Minter.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Authentication.sol\\\";\\nimport \\\"./InfinityMintStorage.sol\\\";\\nimport \\\"./Asset.sol\\\";\\nimport \\\"./RandomNumber.sol\\\";\\nimport \\\"./InfinityMintObject.sol\\\";\\n\\n/// @title Minter Interface\\n/// @author Llydia Cross\\n/// @notice The purpose of this interface is to lay the foundation for a minter contract designed to produce a valid InfinityObject at the end of it\\n/// @dev\\nabstract contract Minter is Authentication {\\n    Asset public assetController;\\n    InfinityMintValues public valuesController;\\n    InfinityMintStorage public storageController;\\n    RandomNumber public randomNumberController;\\n\\n    /*\\n     */\\n    constructor(\\n        address valuesContract,\\n        address storageContract,\\n        address assetContract,\\n        address randomNumberContract\\n    ) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        storageController = InfinityMintStorage(storageContract);\\n        assetController = Asset(assetContract);\\n        randomNumberController = RandomNumber(randomNumberContract);\\n    }\\n\\n    function setAssetController(address assetContract) public onlyApproved {\\n        assetController = Asset(assetContract);\\n    }\\n\\n    function setStorageController(address storageContract) public onlyApproved {\\n        storageController = InfinityMintStorage(storageContract);\\n    }\\n\\n    function setRandomNumberController(address randomNumberContract)\\n        public\\n        onlyApproved\\n    {\\n        randomNumberController = RandomNumber(randomNumberContract);\\n    }\\n\\n    function mint(\\n        uint32 currentTokenId,\\n        address sender,\\n        bytes memory mintData\\n    ) public virtual returns (InfinityMintObject.InfinityObject memory);\\n\\n    /**\\n\\n     */\\n    function getPreview(uint32 currentTokenId, address sender)\\n        external\\n        virtual\\n        returns (uint256 previewCount);\\n\\n    /*\\n\\n    */\\n    function mintPreview(\\n        uint32 index,\\n        uint32 currentTokenId,\\n        address sender\\n    ) external virtual returns (InfinityMintObject.InfinityObject memory);\\n}\\n\",\"keccak256\":\"0x4396a3217553e0bf8461fd9bbae6ca07ffdf5c22559f3bf700b9c795c9d51761\",\"license\":\"UNLICENSED\"},\"contracts/RandomNumber.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InfinityMintValues.sol\\\";\\n\\n/// @title InfinityMint Random Number Abstract Contract\\n/// @author Llydia Cross\\nabstract contract RandomNumber {\\n    uint256 public randomnessFactor;\\n    bool public hasDeployed = false;\\n    uint256 public salt = 1;\\n\\n    InfinityMintValues internal valuesController;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        randomnessFactor = valuesController.getValue(\\\"randomessFactor\\\");\\n    }\\n\\n    function getNumber() external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(valuesController.getValue(\\\"maxRandomNumber\\\"), salt);\\n    }\\n\\n    function getMaxNumber(uint256 maxNumber) external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(maxNumber, salt);\\n    }\\n\\n    /// @notice cheap return number\\n    function returnNumber(uint256 maxNumber, uint256 _salt)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (maxNumber <= 0) maxNumber = 1;\\n        return (_salt + 3) % maxNumber;\\n    }\\n}\\n\",\"keccak256\":\"0xb6626181ed123ae8432c02ec7c68a2edc982f08ede6e71917656524aa9211d57\",\"license\":\"UNLICENSED\"},\"contracts/minter/DefaultMinter.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./../Minter.sol\\\";\\nimport \\\"./../InfinityMintObject.sol\\\";\\n\\ncontract DefaultMinter is Minter, InfinityMintObject {\\n    /*\\n     */\\n    constructor(\\n        address valuesContract,\\n        address storageContract,\\n        address assetContract,\\n        address randomNumberContract\\n    )\\n        Minter(\\n            valuesContract,\\n            storageContract,\\n            assetContract,\\n            randomNumberContract\\n        )\\n    {}\\n\\n    function mintPreview(\\n        uint32 index,\\n        uint32 currentTokenId,\\n        address sender\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        onlyApproved\\n        returns (InfinityObject memory)\\n    {\\n        InfinityObject memory temp = storageController.getPreviewAt(\\n            sender,\\n            index\\n        );\\n\\n        //check the owner to see if its the same\\n        if (temp.owner != sender) revert(\\\"bad owner\\\");\\n        if (temp.currentTokenId != index) revert(\\\"bad index\\\");\\n\\n        return\\n            createInfinityObject(\\n                currentTokenId,\\n                temp.pathId,\\n                temp.pathSize,\\n                temp.assets,\\n                temp.names,\\n                temp.colours,\\n                temp.mintData,\\n                temp.owner,\\n                temp.destinations\\n            );\\n    }\\n\\n    /**\\n\\n     */\\n    function getPreview(uint32 currentTokenId, address sender)\\n        external\\n        virtual\\n        override\\n        onlyApproved\\n        returns (uint256 previewCount)\\n    {\\n        previewCount = valuesController.tryGetValue(\\\"previewCount\\\");\\n        if (previewCount == 0) return previewCount;\\n\\n        uint256 nameCount = randomNumberController.getMaxNumber(\\n            valuesController.tryGetValue(\\\"nameCount\\\")\\n        );\\n\\n        //pick parent to base previews off of\\n        Asset.PartialStruct memory temp = assetController.pickPath(\\n            currentTokenId,\\n            randomNumberController\\n        );\\n\\n        //return it into a real object\\n        InfinityObject memory obj = createInfinityObject(\\n            0, //in this context this is the \\\"preview Id\\\", and we start at zero\\n            assetController.getNextPath(),\\n            temp.pathSize,\\n            temp.assets,\\n            temp.names,\\n            temp.colours,\\n            temp.mintData,\\n            sender,\\n            new address[](0)\\n        );\\n\\n        //store it\\n        storageController.setPreview(sender, 0, obj);\\n\\n        //start at index 1 as we have done 0, base all future previews off of zero\\n        for (uint32 i = 1; i < previewCount; ) {\\n            obj.currentTokenId = i;\\n            //get new assets\\n            obj.assets = assetController.getRandomAsset(\\n                obj.pathId,\\n                randomNumberController\\n            );\\n            //get new colours\\n            obj.colours = assetController.getColours(\\n                obj.pathId,\\n                randomNumberController\\n            );\\n            //get new names\\n            obj.names = assetController.getNames(\\n                nameCount,\\n                randomNumberController\\n            );\\n\\n            //store this variantion\\n            storageController.setPreview(sender, i, obj);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return previewCount;\\n    }\\n\\n    /*\\n\\n    */\\n    function mint(\\n        uint32 currentTokenId,\\n        address sender,\\n        bytes memory\\n    ) public virtual override onlyApproved returns (InfinityObject memory) {\\n        Asset.PartialStruct memory temp = assetController.pickPath(\\n            currentTokenId,\\n            randomNumberController\\n        );\\n\\n        return\\n            createInfinityObject(\\n                currentTokenId,\\n                assetController.getNextPath(),\\n                temp.pathSize,\\n                temp.assets,\\n                temp.names,\\n                temp.colours,\\n                temp.mintData,\\n                sender,\\n                new address[](0)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x146798e3953e8d7ce2ff6619983250b8d8efc36e96f0825bd1dcaeae15791631\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001bb938038062001bb98339810160408190526200003491620000cc565b60008054336001600160a01b0319918216811783558252600260205260408220805460ff19166001908117909155919091556004805482166001600160a01b03968716179055600580548216948616949094179093556003805484169285169290921790915560068054909216921691909117905562000129565b80516001600160a01b0381168114620000c757600080fd5b919050565b60008060008060808587031215620000e357600080fd5b620000ee85620000af565b9350620000fe60208601620000af565b92506200010e60408601620000af565b91506200011e60608601620000af565b905092959194509250565b611a8080620001396000396000f3fe608060405234801561001057600080fd5b50600436106100d05760003560e01c80630c380cf0146100d557806310a8c7a9146101055780631a5dad511461011a5780631bc8bf931461013b5780634c7394761461015b578063573f86001461016e5780636fa13f3c146101815780639bb2ad8814610194578063aed5ef82146101a7578063d15d4150146101ba578063d5f39488146101dd578063d8b964e6146101f0578063ec2b46c314610213578063f2fde38b14610226578063fe528b1814610239578063fe684c0e1461024c575b600080fd5b6004546100e8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610118610113366004611046565b61025f565b005b61012d6101283660046110f6565b6102ff565b6040519081526020016100fc565b61014e610149366004611156565b6108b5565b6040516100fc9190611404565b610118610169366004611417565b610a29565b6003546100e8906001600160a01b031681565b61011861018f366004611417565b610a8f565b61014e6101a2366004611434565b610af5565b6006546100e8906001600160a01b031681565b6101cd6101c8366004611417565b610c90565b60405190151581526020016100fc565b6000546100e8906001600160a01b031681565b6101cd6101fe366004611417565b60026020526000908152604090205460ff1681565b6005546100e8906001600160a01b031681565b610118610234366004611417565b610cc7565b610118610247366004611417565b610d67565b61011861025a36600461147f565b610dcd565b6000546001600160a01b031633146102925760405162461bcd60e51b8152600401610289906114b2565b60405180910390fd5b805161029d57600080fd5b60005b81518110156102fb576001600260008484815181106102c1576102c16114d8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016102a0565b5050565b600080546001600160a01b031633148061032857503360009081526002602052604090205460ff165b6103445760405162461bcd60e51b8152600401610289906114ee565b6004805460405163e7b6dac960e01b8152602092810192909252600c60248301526b1c1c995d9a595dd0dbdd5b9d60a21b60448301526001600160a01b03169063e7b6dac990606401602060405180830381865afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190611514565b9050806103da576108af565b6006546004805460405163e7b6dac960e01b81526000936001600160a01b039081169363a0d0ca0f939091169163e7b6dac99161043591016020808252600990820152681b985b5950dbdd5b9d60ba1b604082015260600190565b602060405180830381865afa158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190611514565b6040518263ffffffff1660e01b815260040161049491815260200190565b6020604051808303816000875af11580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190611514565b60035460065460405163433ee8cd60e01b81529293506000926001600160a01b039283169263433ee8cd92610514928a929091169060040161152d565b6000604051808303816000875af1158015610533573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055b91908101906116af565b905060006106276000600360009054906101000a90046001600160a01b03166001600160a01b03166346e4e7c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db91906117a9565b602085015160408601516060870151608088015160a08901518c60005b604051908082528060200260200182016040528015610621578160200160208202803683370190505b50610eaf565b600554604051632adccb2560e21b81529192506001600160a01b03169063ab732c949061065d90889060009086906004016117c6565b600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b506001925050505b848163ffffffff1610156108aa5763ffffffff811660408084019190915260035483516006549251638e6e826d60e01b81526001600160a01b0392831693638e6e826d936106e7939291169060040161152d565b6000604051808303816000875af1158015610706573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072e91908101906117f6565b60c0830152600354825160065460405163eb2c2da360e01b81526001600160a01b039384169363eb2c2da39361076b93909291169060040161152d565b6000604051808303816000875af115801561078a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b291908101906117f6565b6080830152600354600654604051632637f35160e11b8152600481018790526001600160a01b039182166024820152911690634c6fe6a2906044016000604051808303816000875af115801561080c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108349190810190611832565b60e0830152600554604051632adccb2560e21b81526001600160a01b039091169063ab732c949061086d90899085908790600401611866565b600060405180830381600087803b15801561088757600080fd5b505af115801561089b573d6000803e3d6000fd5b50505050806001019050610693565b505050505b92915050565b6108bd610f13565b6000546001600160a01b03163314806108e557503360009081526002602052604090205460ff165b6109015760405162461bcd60e51b8152600401610289906114ee565b60035460065460405163433ee8cd60e01b81526000926001600160a01b039081169263433ee8cd92610939928a92169060040161152d565b6000604051808303816000875af1158015610958573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098091908101906116af565b9050610a1e85600360009054906101000a90046001600160a01b03166001600160a01b03166346e4e7c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd91906117a9565b602084015160408501516060860151608087015160a08801518b60006105f8565b9150505b9392505050565b6000546001600160a01b0316331480610a5157503360009081526002602052604090205460ff165b610a6d5760405162461bcd60e51b8152600401610289906114ee565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610ab757503360009081526002602052604090205460ff165b610ad35760405162461bcd60e51b8152600401610289906114ee565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610afd610f13565b6000546001600160a01b0316331480610b2557503360009081526002602052604090205460ff165b610b415760405162461bcd60e51b8152600401610289906114ee565b60055460405163fccc3cd560e01b81526001600160a01b03848116600483015263ffffffff87166024830152600092169063fccc3cd590604401600060405180830381865afa158015610b98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bc09190810190611905565b9050826001600160a01b031681606001516001600160a01b031614610c135760405162461bcd60e51b81526020600482015260096024820152683130b21037bbb732b960b91b6044820152606401610289565b8463ffffffff16816040015163ffffffff1614610c5e5760405162461bcd60e51b81526020600482015260096024820152680c4c2c840d2dcc8caf60bb1b6044820152606401610289565b610a1e84826000015183602001518460c001518560e0015186608001518760a001518860600151896101000151610eaf565b600080546001600160a01b03838116911614806108af5750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b03163314610cf15760405162461bcd60e51b8152600401610289906114b2565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b0316331480610d8f57503360009081526002602052604090205460ff165b610dab5760405162461bcd60e51b8152600401610289906114ee565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610df75760405162461bcd60e51b8152600401610289906114b2565b6000546001600160a01b0383811691161415610e4e5760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610289565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b610eb7610f13565b50604080516101208101825263ffffffff998a168152978916602089015298909716978601979097526001600160a01b039096166060850152608084015260a083019490945260c082015260e081019290925261010082015290565b604051806101200160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715610fb257610fb2610f7a565b60405290565b60405161012081016001600160401b0381118282101715610fb257610fb2610f7a565b604051601f8201601f191681016001600160401b038111828210171561100357611003610f7a565b604052919050565b60006001600160401b0382111561102457611024610f7a565b5060051b60200190565b6001600160a01b038116811461104357600080fd5b50565b6000602080838503121561105957600080fd5b82356001600160401b0381111561106f57600080fd5b8301601f8101851361108057600080fd5b803561109361108e8261100b565b610fdb565b81815260059190911b820183019083810190878311156110b257600080fd5b928401925b828410156110d95783356110ca8161102e565b825292840192908401906110b7565b979650505050505050565b63ffffffff8116811461104357600080fd5b6000806040838503121561110957600080fd5b8235611114816110e4565b915060208301356111248161102e565b809150509250929050565b60006001600160401b0382111561114857611148610f7a565b50601f01601f191660200190565b60008060006060848603121561116b57600080fd5b8335611176816110e4565b925060208401356111868161102e565b915060408401356001600160401b038111156111a157600080fd5b8401601f810186136111b257600080fd5b80356111c061108e8261112f565b8181528760208385010111156111d557600080fd5b816020840160208301376000602083830101528093505050509250925092565b600081518084526020808501945080840160005b8381101561122b57815163ffffffff1687529582019590820190600101611209565b509495945050505050565b60005b83811015611251578181015183820152602001611239565b83811115611260576000848401525b50505050565b6000815180845261127e816020860160208601611236565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156112da5782840389526112c8848351611266565b988501989350908401906001016112b0565b5091979650505050505050565b600081518084526020808501945080840160005b8381101561122b5781516001600160a01b0316875295820195908201906001016112fb565b805163ffffffff16825260006101206020830151611346602086018263ffffffff169052565b50604083015161135e604086018263ffffffff169052565b50606083015161137960608601826001600160a01b03169052565b506080830151816080860152611391828601826111f5565b91505060a083015184820360a08601526113ab8282611266565b91505060c083015184820360c08601526113c582826111f5565b91505060e083015184820360e08601526113df8282611292565b91505061010080840151858303828701526113fa83826112e7565b9695505050505050565b602081526000610a226020830184611320565b60006020828403121561142957600080fd5b8135610a228161102e565b60008060006060848603121561144957600080fd5b8335611454816110e4565b92506020840135611464816110e4565b915060408401356114748161102e565b809150509250925092565b6000806040838503121561149257600080fd5b823561149d8161102e565b91506020830135801515811461112457600080fd5b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b60006020828403121561152657600080fd5b5051919050565b63ffffffff9290921682526001600160a01b0316602082015260400190565b8051611557816110e4565b919050565b600082601f83011261156d57600080fd5b8151602061157d61108e8361100b565b82815260059290921b8401810191818101908684111561159c57600080fd5b8286015b848110156115c05780516115b3816110e4565b83529183019183016115a0565b509695505050505050565b60006115d961108e8461112f565b90508281528383830111156115ed57600080fd5b610a22836020830184611236565b600082601f83011261160c57600080fd5b8151602061161c61108e8361100b565b82815260059290921b8401810191818101908684111561163b57600080fd5b8286015b848110156115c05780516001600160401b0381111561165e5760008081fd5b8701603f810189136116705760008081fd5b6116818986830151604084016115cb565b84525091830191830161163f565b600082601f8301126116a057600080fd5b610a22838351602085016115cb565b6000602082840312156116c157600080fd5b81516001600160401b03808211156116d857600080fd5b9083019060c082860312156116ec57600080fd5b6116f4610f90565b6116fd8361154c565b815261170b6020840161154c565b602082015260408301518281111561172257600080fd5b61172e8782860161155c565b60408301525060608301518281111561174657600080fd5b611752878286016115fb565b60608301525060808301518281111561176a57600080fd5b6117768782860161155c565b60808301525060a08301518281111561178e57600080fd5b61179a8782860161168f565b60a08301525095945050505050565b6000602082840312156117bb57600080fd5b8151610a22816110e4565b60018060a01b03841681528260208201526060604082015260006117ed6060830184611320565b95945050505050565b60006020828403121561180857600080fd5b81516001600160401b0381111561181e57600080fd5b61182a8482850161155c565b949350505050565b60006020828403121561184457600080fd5b81516001600160401b0381111561185a57600080fd5b61182a848285016115fb565b6001600160a01b038416815263ffffffff831660208201526060604082018190526000906117ed90830184611320565b80516115578161102e565b600082601f8301126118b257600080fd5b815160206118c261108e8361100b565b82815260059290921b840181019181810190868411156118e157600080fd5b8286015b848110156115c05780516118f88161102e565b83529183019183016118e5565b60006020828403121561191757600080fd5b81516001600160401b038082111561192e57600080fd5b90830190610120828603121561194357600080fd5b61194b610fb8565b6119548361154c565b81526119626020840161154c565b60208201526119736040840161154c565b604082015261198460608401611896565b606082015260808301518281111561199b57600080fd5b6119a78782860161155c565b60808301525060a0830151828111156119bf57600080fd5b6119cb8782860161168f565b60a08301525060c0830151828111156119e357600080fd5b6119ef8782860161155c565b60c08301525060e083015182811115611a0757600080fd5b611a13878286016115fb565b60e0830152506101008084015183811115611a2d57600080fd5b611a39888287016118a1565b91830191909152509594505050505056fea264697066735822122030ffbfa876ddb36cc1a06e523f92ce235723fa279432f4faf9a1e6c6627104a564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d05760003560e01c80630c380cf0146100d557806310a8c7a9146101055780631a5dad511461011a5780631bc8bf931461013b5780634c7394761461015b578063573f86001461016e5780636fa13f3c146101815780639bb2ad8814610194578063aed5ef82146101a7578063d15d4150146101ba578063d5f39488146101dd578063d8b964e6146101f0578063ec2b46c314610213578063f2fde38b14610226578063fe528b1814610239578063fe684c0e1461024c575b600080fd5b6004546100e8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610118610113366004611046565b61025f565b005b61012d6101283660046110f6565b6102ff565b6040519081526020016100fc565b61014e610149366004611156565b6108b5565b6040516100fc9190611404565b610118610169366004611417565b610a29565b6003546100e8906001600160a01b031681565b61011861018f366004611417565b610a8f565b61014e6101a2366004611434565b610af5565b6006546100e8906001600160a01b031681565b6101cd6101c8366004611417565b610c90565b60405190151581526020016100fc565b6000546100e8906001600160a01b031681565b6101cd6101fe366004611417565b60026020526000908152604090205460ff1681565b6005546100e8906001600160a01b031681565b610118610234366004611417565b610cc7565b610118610247366004611417565b610d67565b61011861025a36600461147f565b610dcd565b6000546001600160a01b031633146102925760405162461bcd60e51b8152600401610289906114b2565b60405180910390fd5b805161029d57600080fd5b60005b81518110156102fb576001600260008484815181106102c1576102c16114d8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016102a0565b5050565b600080546001600160a01b031633148061032857503360009081526002602052604090205460ff165b6103445760405162461bcd60e51b8152600401610289906114ee565b6004805460405163e7b6dac960e01b8152602092810192909252600c60248301526b1c1c995d9a595dd0dbdd5b9d60a21b60448301526001600160a01b03169063e7b6dac990606401602060405180830381865afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190611514565b9050806103da576108af565b6006546004805460405163e7b6dac960e01b81526000936001600160a01b039081169363a0d0ca0f939091169163e7b6dac99161043591016020808252600990820152681b985b5950dbdd5b9d60ba1b604082015260600190565b602060405180830381865afa158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190611514565b6040518263ffffffff1660e01b815260040161049491815260200190565b6020604051808303816000875af11580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190611514565b60035460065460405163433ee8cd60e01b81529293506000926001600160a01b039283169263433ee8cd92610514928a929091169060040161152d565b6000604051808303816000875af1158015610533573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055b91908101906116af565b905060006106276000600360009054906101000a90046001600160a01b03166001600160a01b03166346e4e7c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db91906117a9565b602085015160408601516060870151608088015160a08901518c60005b604051908082528060200260200182016040528015610621578160200160208202803683370190505b50610eaf565b600554604051632adccb2560e21b81529192506001600160a01b03169063ab732c949061065d90889060009086906004016117c6565b600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b506001925050505b848163ffffffff1610156108aa5763ffffffff811660408084019190915260035483516006549251638e6e826d60e01b81526001600160a01b0392831693638e6e826d936106e7939291169060040161152d565b6000604051808303816000875af1158015610706573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072e91908101906117f6565b60c0830152600354825160065460405163eb2c2da360e01b81526001600160a01b039384169363eb2c2da39361076b93909291169060040161152d565b6000604051808303816000875af115801561078a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b291908101906117f6565b6080830152600354600654604051632637f35160e11b8152600481018790526001600160a01b039182166024820152911690634c6fe6a2906044016000604051808303816000875af115801561080c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108349190810190611832565b60e0830152600554604051632adccb2560e21b81526001600160a01b039091169063ab732c949061086d90899085908790600401611866565b600060405180830381600087803b15801561088757600080fd5b505af115801561089b573d6000803e3d6000fd5b50505050806001019050610693565b505050505b92915050565b6108bd610f13565b6000546001600160a01b03163314806108e557503360009081526002602052604090205460ff165b6109015760405162461bcd60e51b8152600401610289906114ee565b60035460065460405163433ee8cd60e01b81526000926001600160a01b039081169263433ee8cd92610939928a92169060040161152d565b6000604051808303816000875af1158015610958573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098091908101906116af565b9050610a1e85600360009054906101000a90046001600160a01b03166001600160a01b03166346e4e7c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd91906117a9565b602084015160408501516060860151608087015160a08801518b60006105f8565b9150505b9392505050565b6000546001600160a01b0316331480610a5157503360009081526002602052604090205460ff165b610a6d5760405162461bcd60e51b8152600401610289906114ee565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331480610ab757503360009081526002602052604090205460ff165b610ad35760405162461bcd60e51b8152600401610289906114ee565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610afd610f13565b6000546001600160a01b0316331480610b2557503360009081526002602052604090205460ff165b610b415760405162461bcd60e51b8152600401610289906114ee565b60055460405163fccc3cd560e01b81526001600160a01b03848116600483015263ffffffff87166024830152600092169063fccc3cd590604401600060405180830381865afa158015610b98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bc09190810190611905565b9050826001600160a01b031681606001516001600160a01b031614610c135760405162461bcd60e51b81526020600482015260096024820152683130b21037bbb732b960b91b6044820152606401610289565b8463ffffffff16816040015163ffffffff1614610c5e5760405162461bcd60e51b81526020600482015260096024820152680c4c2c840d2dcc8caf60bb1b6044820152606401610289565b610a1e84826000015183602001518460c001518560e0015186608001518760a001518860600151896101000151610eaf565b600080546001600160a01b03838116911614806108af5750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b03163314610cf15760405162461bcd60e51b8152600401610289906114b2565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b0316331480610d8f57503360009081526002602052604090205460ff165b610dab5760405162461bcd60e51b8152600401610289906114ee565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610df75760405162461bcd60e51b8152600401610289906114b2565b6000546001600160a01b0383811691161415610e4e5760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b6044820152606401610289565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b610eb7610f13565b50604080516101208101825263ffffffff998a168152978916602089015298909716978601979097526001600160a01b039096166060850152608084015260a083019490945260c082015260e081019290925261010082015290565b604051806101200160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715610fb257610fb2610f7a565b60405290565b60405161012081016001600160401b0381118282101715610fb257610fb2610f7a565b604051601f8201601f191681016001600160401b038111828210171561100357611003610f7a565b604052919050565b60006001600160401b0382111561102457611024610f7a565b5060051b60200190565b6001600160a01b038116811461104357600080fd5b50565b6000602080838503121561105957600080fd5b82356001600160401b0381111561106f57600080fd5b8301601f8101851361108057600080fd5b803561109361108e8261100b565b610fdb565b81815260059190911b820183019083810190878311156110b257600080fd5b928401925b828410156110d95783356110ca8161102e565b825292840192908401906110b7565b979650505050505050565b63ffffffff8116811461104357600080fd5b6000806040838503121561110957600080fd5b8235611114816110e4565b915060208301356111248161102e565b809150509250929050565b60006001600160401b0382111561114857611148610f7a565b50601f01601f191660200190565b60008060006060848603121561116b57600080fd5b8335611176816110e4565b925060208401356111868161102e565b915060408401356001600160401b038111156111a157600080fd5b8401601f810186136111b257600080fd5b80356111c061108e8261112f565b8181528760208385010111156111d557600080fd5b816020840160208301376000602083830101528093505050509250925092565b600081518084526020808501945080840160005b8381101561122b57815163ffffffff1687529582019590820190600101611209565b509495945050505050565b60005b83811015611251578181015183820152602001611239565b83811115611260576000848401525b50505050565b6000815180845261127e816020860160208601611236565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156112da5782840389526112c8848351611266565b988501989350908401906001016112b0565b5091979650505050505050565b600081518084526020808501945080840160005b8381101561122b5781516001600160a01b0316875295820195908201906001016112fb565b805163ffffffff16825260006101206020830151611346602086018263ffffffff169052565b50604083015161135e604086018263ffffffff169052565b50606083015161137960608601826001600160a01b03169052565b506080830151816080860152611391828601826111f5565b91505060a083015184820360a08601526113ab8282611266565b91505060c083015184820360c08601526113c582826111f5565b91505060e083015184820360e08601526113df8282611292565b91505061010080840151858303828701526113fa83826112e7565b9695505050505050565b602081526000610a226020830184611320565b60006020828403121561142957600080fd5b8135610a228161102e565b60008060006060848603121561144957600080fd5b8335611454816110e4565b92506020840135611464816110e4565b915060408401356114748161102e565b809150509250925092565b6000806040838503121561149257600080fd5b823561149d8161102e565b91506020830135801515811461112457600080fd5b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b60006020828403121561152657600080fd5b5051919050565b63ffffffff9290921682526001600160a01b0316602082015260400190565b8051611557816110e4565b919050565b600082601f83011261156d57600080fd5b8151602061157d61108e8361100b565b82815260059290921b8401810191818101908684111561159c57600080fd5b8286015b848110156115c05780516115b3816110e4565b83529183019183016115a0565b509695505050505050565b60006115d961108e8461112f565b90508281528383830111156115ed57600080fd5b610a22836020830184611236565b600082601f83011261160c57600080fd5b8151602061161c61108e8361100b565b82815260059290921b8401810191818101908684111561163b57600080fd5b8286015b848110156115c05780516001600160401b0381111561165e5760008081fd5b8701603f810189136116705760008081fd5b6116818986830151604084016115cb565b84525091830191830161163f565b600082601f8301126116a057600080fd5b610a22838351602085016115cb565b6000602082840312156116c157600080fd5b81516001600160401b03808211156116d857600080fd5b9083019060c082860312156116ec57600080fd5b6116f4610f90565b6116fd8361154c565b815261170b6020840161154c565b602082015260408301518281111561172257600080fd5b61172e8782860161155c565b60408301525060608301518281111561174657600080fd5b611752878286016115fb565b60608301525060808301518281111561176a57600080fd5b6117768782860161155c565b60808301525060a08301518281111561178e57600080fd5b61179a8782860161168f565b60a08301525095945050505050565b6000602082840312156117bb57600080fd5b8151610a22816110e4565b60018060a01b03841681528260208201526060604082015260006117ed6060830184611320565b95945050505050565b60006020828403121561180857600080fd5b81516001600160401b0381111561181e57600080fd5b61182a8482850161155c565b949350505050565b60006020828403121561184457600080fd5b81516001600160401b0381111561185a57600080fd5b61182a848285016115fb565b6001600160a01b038416815263ffffffff831660208201526060604082018190526000906117ed90830184611320565b80516115578161102e565b600082601f8301126118b257600080fd5b815160206118c261108e8361100b565b82815260059290921b840181019181810190868411156118e157600080fd5b8286015b848110156115c05780516118f88161102e565b83529183019183016118e5565b60006020828403121561191757600080fd5b81516001600160401b038082111561192e57600080fd5b90830190610120828603121561194357600080fd5b61194b610fb8565b6119548361154c565b81526119626020840161154c565b60208201526119736040840161154c565b604082015261198460608401611896565b606082015260808301518281111561199b57600080fd5b6119a78782860161155c565b60808301525060a0830151828111156119bf57600080fd5b6119cb8782860161168f565b60a08301525060c0830151828111156119e357600080fd5b6119ef8782860161155c565b60c08301525060e083015182811115611a0757600080fd5b611a13878286016115fb565b60e0830152506101008084015183811115611a2d57600080fd5b611a39888287016118a1565b91830191909152509594505050505056fea264697066735822122030ffbfa876ddb36cc1a06e523f92ce235723fa279432f4faf9a1e6c6627104a564736f6c634300080c0033",
  "libraries": {
    "InfinityMintUtil": "0xd7fcAa6A3e68e4eDAb6eA551594cF60CCe436F73"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 458,
        "contract": "contracts/minter/DefaultMinter.sol:DefaultMinter",
        "label": "deployer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 461,
        "contract": "contracts/minter/DefaultMinter.sol:DefaultMinter",
        "label": "executionCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/minter/DefaultMinter.sol:DefaultMinter",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7527,
        "contract": "contracts/minter/DefaultMinter.sol:DefaultMinter",
        "label": "assetController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Asset)453"
      },
      {
        "astId": 7530,
        "contract": "contracts/minter/DefaultMinter.sol:DefaultMinter",
        "label": "valuesController",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(InfinityMintValues)7222"
      },
      {
        "astId": 7533,
        "contract": "contracts/minter/DefaultMinter.sol:DefaultMinter",
        "label": "storageController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(InfinityMintStorage)6826"
      },
      {
        "astId": 7536,
        "contract": "contracts/minter/DefaultMinter.sol:DefaultMinter",
        "label": "randomNumberController",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(RandomNumber)8096"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Asset)453": {
        "encoding": "inplace",
        "label": "contract Asset",
        "numberOfBytes": "20"
      },
      "t_contract(InfinityMintStorage)6826": {
        "encoding": "inplace",
        "label": "contract InfinityMintStorage",
        "numberOfBytes": "20"
      },
      "t_contract(InfinityMintValues)7222": {
        "encoding": "inplace",
        "label": "contract InfinityMintValues",
        "numberOfBytes": "20"
      },
      "t_contract(RandomNumber)8096": {
        "encoding": "inplace",
        "label": "contract RandomNumber",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}