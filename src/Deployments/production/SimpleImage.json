{
  "address": "0x5e42832B838fdE0E2225FdA02400b4dFff8a6EC8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "valuesContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "changee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "PermissionChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferedOwnership",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rarities",
          "type": "uint256[]"
        }
      ],
      "name": "addAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetsType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "newNames",
          "type": "string[]"
        }
      ],
      "name": "combineNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pathIds",
          "type": "uint32[]"
        }
      ],
      "name": "flatPathSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getColours",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "result",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getMintData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nameCount",
          "type": "uint256"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "results",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextPath",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getNextPathId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pathId",
          "type": "uint256"
        }
      ],
      "name": "getPathSections",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "getPathSize",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "getRandomAsset",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "assetsId",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sectionId",
          "type": "uint256"
        }
      ],
      "name": "getSectionAssets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAuthenticated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "isValidPath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "multiApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "pickPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Asset.PartialStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "currentTokenId",
          "type": "uint32"
        },
        {
          "internalType": "contract RandomNumber",
          "name": "randomNumberController",
          "type": "address"
        }
      ],
      "name": "pickPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "pathId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "pathSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32[]",
              "name": "assets",
              "type": "uint32[]"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint32[]",
              "name": "colours",
              "type": "uint32[]"
            },
            {
              "internalType": "bytes",
              "name": "mintData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Asset.PartialStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_assets",
          "type": "uint256[]"
        }
      ],
      "name": "pushSectionAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetPaths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "assets",
          "type": "uint32[]"
        }
      ],
      "name": "setLastAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "setLastPathId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "newNames",
          "type": "string[]"
        }
      ],
      "name": "setNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        }
      ],
      "name": "setNextPathId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPathCount",
          "type": "uint256"
        }
      ],
      "name": "setPathCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPathDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "pathIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "_sections",
          "type": "uint256[][]"
        }
      ],
      "name": "setPathSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "pathId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "pathSize",
          "type": "uint32"
        }
      ],
      "name": "setPathSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "newPathSizes",
          "type": "uint32[]"
        }
      ],
      "name": "setPathSizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPrivilages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "sectionId",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "_assets",
          "type": "uint256[]"
        }
      ],
      "name": "setSectionAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87d4eba8ff1207c0f1d8ef8f344508afd50d3355e4216b7b46c475f76df3c9c3",
  "receipt": {
    "to": null,
    "from": "0x527738Dd42170065d778C89264654b03f8Ed989B",
    "contractAddress": "0x5e42832B838fdE0E2225FdA02400b4dFff8a6EC8",
    "transactionIndex": 64,
    "gasUsed": "3379383",
    "logsBloom": "0x
    "blockHash": "0x37af7f5c1c56d6c190fd360f9e0d0b04ac39ff5881e84f199dfca441ffafbc64",
    "transactionHash": "0x87d4eba8ff1207c0f1d8ef8f344508afd50d3355e4216b7b46c475f76df3c9c3",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 39045835,
        "transactionHash": "0x87d4eba8ff1207c0f1d8ef8f344508afd50d3355e4216b7b46c475f76df3c9c3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000527738dd42170065d778c89264654b03f8ed989b",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001cc1b0d8f06167300000000000000000000000000000000000000000000000044265a4ac920b86200000000000000000000000000000000000000000000015d0f7e12d7dcdb0a20000000000000000000000000000000000000000000000000425a3f3d3a1aa1ef00000000000000000000000000000000000000000000015d114a2de56be12093",
        "logIndex": 223,
        "blockHash": "0x37af7f5c1c56d6c190fd360f9e0d0b04ac39ff5881e84f199dfca441ffafbc64"
      }
    ],
    "blockNumber": 39045835,
    "cumulativeGasUsed": "11616407",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "AWEdacity🎫Ticket",
    "0x2d65a808DBB7F6fF5d7815F7c0D26cb0B7d8149e"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0f3f5743d043d6d0147204e57adad5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"valuesContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PermissionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferedOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rarities\",\"type\":\"uint256[]\"}],\"name\":\"addAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newNames\",\"type\":\"string[]\"}],\"name\":\"combineNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pathIds\",\"type\":\"uint32[]\"}],\"name\":\"flatPathSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getColours\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"result\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getMintData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nameCount\",\"type\":\"uint256\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"results\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPath\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getNextPathId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getPathSections\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"getPathSize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"getRandomAsset\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"assetsId\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sectionId\",\"type\":\"uint256\"}],\"name\":\"getSectionAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthenticated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"isValidPath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"multiApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"pickPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct Asset.PartialStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentTokenId\",\"type\":\"uint32\"},{\"internalType\":\"contract RandomNumber\",\"name\":\"randomNumberController\",\"type\":\"address\"}],\"name\":\"pickPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"colours\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"internalType\":\"struct Asset.PartialStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_assets\",\"type\":\"uint256[]\"}],\"name\":\"pushSectionAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"assets\",\"type\":\"uint32[]\"}],\"name\":\"setLastAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"setLastPathId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newNames\",\"type\":\"string[]\"}],\"name\":\"setNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"}],\"name\":\"setNextPathId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPathCount\",\"type\":\"uint256\"}],\"name\":\"setPathCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPathDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"pathIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_sections\",\"type\":\"uint256[][]\"}],\"name\":\"setPathSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pathId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pathSize\",\"type\":\"uint32\"}],\"name\":\"setPathSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"newPathSizes\",\"type\":\"uint32[]\"}],\"name\":\"setPathSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPrivilages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_assets\",\"type\":\"uint256[]\"}],\"name\":\"setSectionAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assets/SimpleImage.sol\":\"SimpleImage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/Asset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RandomNumber.sol\\\";\\n\\nabstract contract Asset {\\n    struct PartialStruct {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32[] assets;\\n        string[] names;\\n        uint32[] colours;\\n        bytes mintData;\\n    }\\n\\n    function getColours(uint32 pathId, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32[] memory result);\\n\\n    function getDefaultName() internal virtual returns (string memory);\\n\\n    function getNextPath() external view virtual returns (uint32);\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function isValidPath(uint32 pathId) external view virtual returns (bool);\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (PartialStruct memory);\\n\\n    function setLastAssets(uint32[] memory assets) public virtual;\\n\\n    function getNames(uint256 nameCount, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (string[] memory results);\\n\\n    function getRandomAsset(uint32 pathId, RandomNumber randomNumberController)\\n        external\\n        virtual\\n        returns (uint32[] memory assetsId);\\n\\n    function getMintData(\\n        uint32 pathId,\\n        uint32 tokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual returns (bytes memory);\\n\\n    function addAsset(uint256 rarity) public virtual;\\n\\n    function setNextPathId(uint32 pathId) public virtual;\\n\\n    function setLastPathId(uint32 pathId) public virtual;\\n\\n    function getPathSize(uint32 pathId) public view virtual returns (uint32);\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        returns (uint32);\\n}\\n\",\"keccak256\":\"0x2552f3763dbab53a663753b004eefcd370ffbba0e6d9019d463255ab1bff1c39\",\"license\":\"UNLICENSED\"},\"contracts/Authentication.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InfinityMintObject.sol\\\";\\n\\nabstract contract Authentication {\\n    address public deployer;\\n    /// @notice for re-entry prevention, keeps track of a methods execution count\\n    uint256 private executionCount;\\n\\n    mapping(address => bool) public approved;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n        approved[msg.sender] = true;\\n        executionCount = 0;\\n    }\\n\\n    event PermissionChange(\\n        address indexed sender,\\n        address indexed changee,\\n        bool value\\n    );\\n\\n    event TransferedOwnership(address indexed from, address indexed to);\\n\\n    /// @notice Limits execution of a method to once in the given context.\\n    /// @dev prevents re-entry attack\\n    modifier onlyOnce() {\\n        executionCount += 1;\\n        uint256 localCounter = executionCount;\\n        _;\\n        require(localCounter == executionCount);\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(deployer == msg.sender, \\\"not deployer\\\");\\n        _;\\n    }\\n\\n    modifier onlyApproved() {\\n        require(deployer == msg.sender || approved[msg.sender], \\\"not approved\\\");\\n        _;\\n    }\\n\\n    function setPrivilages(address addr, bool value) public onlyDeployer {\\n        require(addr != deployer, \\\"cannot modify deployer\\\");\\n        approved[addr] = value;\\n\\n        emit PermissionChange(msg.sender, addr, value);\\n    }\\n\\n    function multiApprove(address[] memory addrs) public onlyDeployer {\\n        require(addrs.length != 0);\\n        for (uint256 i = 0; i < addrs.length; ) {\\n            approved[addrs[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isAuthenticated(address addr) external view returns (bool) {\\n        return addr == deployer || approved[addr];\\n    }\\n\\n    function transferOwnership(address addr) public onlyDeployer {\\n        approved[deployer] = false;\\n        deployer = addr;\\n        approved[addr] = true;\\n\\n        emit TransferedOwnership(msg.sender, addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0895e5e3736b655a297268b47327827b4de3b5a561af0ee25fca784bdf2d70d1\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintAsset.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Asset.sol\\\";\\nimport \\\"./Authentication.sol\\\";\\n\\nabstract contract InfinityMintAsset is Asset, Authentication {\\n    mapping(uint256 => bool) internal disabledPaths; //disabled paths which are not picked\\n    mapping(uint256 => uint256[]) internal pathSections; //what sections are to what path\\n\\n    //user values\\n    InfinityMintValues internal valuesController;\\n\\n    //the token name\\n    string internal tokenName = \\\"asset\\\";\\n    string public assetsType = \\\"default\\\"; //the type of assetId is default\\n\\n    //path stuff\\n    uint256 internal pathCount;\\n    uint32[] internal pathSizes; //the amount of points in a path (used in random colour generation with SVG things)\\n    uint256 internal safeDefaultReturnPath; //used in the case we cannot decide what path to randomly select we will return the value of this\\n\\n    uint256 internal assetId; //\\n    uint256[][] internal assetsSections; //the sections to an asset\\n    uint256[] internal assetRarity; //a list of asset rarity\\n    uint32[] internal lastAssets; //the last selection of assets\\n    uint32 internal nextPath = 0; //the next path to be minted\\n    uint32 internal lastPath = 0;\\n\\n    //the names to pick from when generating\\n    string[] internal names;\\n\\n    //if all paths are for all sections\\n    bool private flatSections = false;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        assetRarity.push(0); //so assetId start at 1 not zero so zero can be treat as a\\n    }\\n\\n    function setNames(string[] memory newNames) public onlyApproved {\\n        names = newNames;\\n    }\\n\\n    function resetNames() public onlyApproved {\\n        delete names;\\n    }\\n\\n    function resetAssets() public onlyApproved {\\n        delete assetRarity;\\n        delete assetsSections;\\n        assetRarity.push(0);\\n        assetId = 0;\\n        flatSections = false;\\n    }\\n\\n    function resetPaths() public onlyApproved {\\n        delete pathSizes;\\n        pathCount = 0;\\n        safeDefaultReturnPath = 0;\\n    }\\n\\n    function combineNames(string[] memory newNames) public onlyApproved {\\n        require(newNames.length < 100);\\n\\n        for (uint256 i = 0; i < newNames.length; ) {\\n            names.push(newNames[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function addName(string memory name) public onlyApproved {\\n        names.push(name);\\n    }\\n\\n    function setNextPathId(uint32 pathId) public virtual override onlyApproved {\\n        nextPath = pathId;\\n    }\\n\\n    function setLastPathId(uint32 pathId) public virtual override onlyApproved {\\n        lastPath = pathId;\\n    }\\n\\n    function getNextPath() external view virtual override returns (uint32) {\\n        return nextPath;\\n    }\\n\\n    function setLastAssets(uint32[] memory assets)\\n        public\\n        virtual\\n        override\\n        onlyApproved\\n    {\\n        lastAssets = assets;\\n    }\\n\\n    function getPathSections(uint256 pathId)\\n        external\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        return pathSections[pathId];\\n    }\\n\\n    function getSectionAssets(uint256 sectionId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return assetsSections[sectionId];\\n    }\\n\\n    function setPathSize(uint32 pathId, uint32 pathSize) public onlyApproved {\\n        pathSizes[pathId] = pathSize;\\n    }\\n\\n    function setPathSizes(uint32[] memory newPathSizes) public onlyApproved {\\n        pathSizes = newPathSizes;\\n    }\\n\\n    function getPathSize(uint32 pathId) public view override returns (uint32) {\\n        if (pathId >= pathSizes.length) return 1;\\n\\n        return pathSizes[pathId];\\n    }\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        override\\n        returns (uint32)\\n    {\\n        uint256 result = randomNumberController.getMaxNumber(pathCount);\\n\\n        //path is greather than token Paths\\n        if (result >= pathCount) return uint32(safeDefaultReturnPath);\\n\\n        //count up until a non disabled path is found\\n        while (disabledPaths[result]) {\\n            if (result + 1 >= pathCount) result = 0;\\n            result++;\\n        }\\n\\n        return uint32(result);\\n    }\\n\\n    function getNames(uint256 nameCount, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        override\\n        returns (string[] memory results)\\n    {\\n        string memory defaultName = getDefaultName();\\n\\n        // matched and incremental use nextPath to get their name\\n        if (\\n            !valuesController.isTrue(\\\"matchedMode\\\") &&\\n            !valuesController.isTrue(\\\"incrementalMode\\\")\\n        ) {\\n            if (nameCount <= 0 && valuesController.isTrue(\\\"mustGenerateName\\\"))\\n                nameCount = 1;\\n\\n            if (nameCount <= 0 || names.length == 0) {\\n                results = new string[](1);\\n                results[0] = defaultName;\\n                return results;\\n            }\\n\\n            results = new string[](nameCount + 1);\\n\\n            for (uint32 i = 0; i < nameCount; ) {\\n                uint256 result = randomNumberController.getMaxNumber(\\n                    names.length\\n                );\\n\\n                if (result >= names.length) result = 0;\\n                results[i] = names[result];\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            results[nameCount] = defaultName;\\n        } else {\\n            results = new string[](2);\\n\\n            if (names.length == 0) results[0] = \\\"\\\";\\n            else if (nextPath < names.length) results[0] = names[nextPath];\\n            else results[0] = names[0];\\n            results[1] = defaultName;\\n        }\\n    }\\n\\n    function getMintData(\\n        uint32,\\n        uint32,\\n        RandomNumber\\n    ) public virtual override returns (bytes memory) {\\n        return \\\"{}\\\"; //returns a blank json array\\n    }\\n\\n    function getDefaultName()\\n        internal\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return tokenName;\\n    }\\n\\n    function isValidPath(uint32 pathId) public view override returns (bool) {\\n        return (pathId >= 0 && pathId < pathCount && !disabledPaths[pathId]);\\n    }\\n\\n    function pickPath(\\n        uint32 pathId,\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (PartialStruct memory) {\\n        setNextPathId(pathId);\\n        setLastAssets(getRandomAsset(pathId, randomNumberController));\\n\\n        return\\n            PartialStruct(\\n                pathId,\\n                getPathSize(pathId),\\n                lastAssets,\\n                getNames(\\n                    randomNumberController.getMaxNumber(\\n                        valuesController.tryGetValue(\\\"nameCount\\\")\\n                    ),\\n                    randomNumberController\\n                ),\\n                getColours(pathId, randomNumberController),\\n                getMintData(pathId, currentTokenId, randomNumberController)\\n            );\\n    }\\n\\n    function pickPath(\\n        uint32 currentTokenId,\\n        RandomNumber randomNumberController\\n    ) public virtual override returns (PartialStruct memory) {\\n        return\\n            pickPath(\\n                getNextPathId(randomNumberController),\\n                currentTokenId,\\n                randomNumberController\\n            );\\n    }\\n\\n    function getRandomAsset(uint32 pathId, RandomNumber randomNumberController)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint32[] memory assetsId)\\n    {\\n        if (assetId == 0) {\\n            return assetsId;\\n        }\\n\\n        uint256[] memory sections;\\n        if (flatSections) sections = pathSections[0];\\n        else sections = pathSections[pathId];\\n\\n        //index position of sections\\n        uint256 indexPosition = 0;\\n        //current random number salt\\n        uint256 salt = randomNumberController.salt();\\n\\n        if (sections.length == 0) {\\n            return assetsId;\\n        } else {\\n            assetsId = new uint32[](sections.length);\\n            uint32[] memory selectedPaths;\\n            uint256[] memory section;\\n            for (uint256 i = 0; i < sections.length; ) {\\n                section = assetsSections[sections[i]];\\n\\n                if (section.length == 0) {\\n                    assetsId[indexPosition++] = 0;\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n\\n                if (section.length == 1 && assetRarity[section[0]] == 100) {\\n                    assetsId[indexPosition++] = uint32(section[0]);\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n\\n                selectedPaths = new uint32[](section.length);\\n                //repeat filling array with found values\\n                uint256 count = 0;\\n\\n                for (uint256 index = 0; index < section.length; ) {\\n                    if (count == selectedPaths.length) break;\\n                    if (section[index] == 0) {\\n                        unchecked {\\n                            ++index;\\n                        }\\n                        continue;\\n                    }\\n\\n                    uint256 rarity = 0;\\n\\n                    if (assetRarity.length > section[index])\\n                        rarity = assetRarity[section[index]];\\n\\n                    if (\\n                        (rarity == 100 ||\\n                            rarity >\\n                            randomNumberController.returnNumber(\\n                                100,\\n                                i +\\n                                    index +\\n                                    rarity +\\n                                    count +\\n                                    salt +\\n                                    indexPosition\\n                            ))\\n                    ) selectedPaths[count++] = uint32(section[index]);\\n\\n                    unchecked {\\n                        ++index;\\n                    }\\n                }\\n\\n                //pick an asset\\n                uint256 result = 0;\\n\\n                if (count <= 1) assetsId[indexPosition++] = selectedPaths[0];\\n                else if (count >= 2) {\\n                    result = randomNumberController.returnNumber(\\n                        count,\\n                        selectedPaths.length + count + indexPosition + salt\\n                    );\\n                    if (result < selectedPaths.length)\\n                        assetsId[indexPosition++] = selectedPaths[result];\\n                    else assetsId[indexPosition++] = 0;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    function setSectionAssets(uint32 sectionId, uint256[] memory _assets)\\n        public\\n        onlyDeployer\\n    {\\n        assetsSections[sectionId] = _assets;\\n    }\\n\\n    function pushSectionAssets(uint256[] memory _assets) public onlyDeployer {\\n        assetsSections.push(_assets);\\n    }\\n\\n    function flatPathSections(uint32[] memory pathIds) public onlyDeployer {\\n        pathSections[0] = pathIds;\\n        flatSections = true;\\n    }\\n\\n    function setPathSections(\\n        uint32[] memory pathIds,\\n        uint256[][] memory _sections\\n    ) public onlyDeployer {\\n        require(pathIds.length == _sections.length);\\n\\n        for (uint256 i = 0; i < pathIds.length; i++) {\\n            pathSections[pathIds[i]] = _sections[i];\\n        }\\n    }\\n\\n    function addAssets(uint256[] memory rarities) public onlyDeployer {\\n        for (uint256 i = 0; i < rarities.length; ) {\\n            if (rarities[i] > 100) revert(\\\"one of more rarities are above 100\\\");\\n            assetRarity.push(rarities[i]);\\n            //increment asset counter\\n            assetId += 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function addAsset(uint256 rarity) public virtual override onlyDeployer {\\n        if (rarity > 100) revert();\\n\\n        //increment asset counter\\n        assetRarity.push(rarity);\\n        assetId += 1;\\n    }\\n\\n    //returns randomised colours for SVG Paths\\n    function getColours(uint32 pathId, RandomNumber randomNumberController)\\n        public\\n        virtual\\n        override\\n        returns (uint32[] memory result)\\n    {\\n        uint32 pathSize = getPathSize(pathId);\\n        uint256 div = valuesController.tryGetValue(\\\"colourChunkSize\\\");\\n\\n        if (div <= 0) div = 4;\\n\\n        if (pathSize <= div) {\\n            result = new uint32[](4);\\n            result[0] = uint32(randomNumberController.getMaxNumber(0xFFFFFF));\\n            result[1] = pathSize;\\n            result[2] = uint32(randomNumberController.getMaxNumber(0xFFFFFFFF));\\n            result[3] = uint32(valuesController.tryGetValue(\\\"extraColours\\\"));\\n            return result;\\n        }\\n\\n        uint32 groups = uint32(1 + (pathSize / div));\\n        uint32 size = (groups * 2);\\n        uint32 tempPathSize = (pathSize);\\n        uint256 count = 0;\\n        result = new uint32[](size + 2);\\n        for (uint256 i = 0; i < size; ) {\\n            if (i == 0 || i % 2 == 0)\\n                result[i] = uint32(\\n                    randomNumberController.getMaxNumber(0xFFFFFF)\\n                );\\n            else {\\n                uint256 tempResult = tempPathSize - (div * count++);\\n                result[i] = uint32(tempResult > div ? div : tempResult);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        result[result.length - 2] = uint32(\\n            randomNumberController.getMaxNumber(0xFFFFFFFF)\\n        );\\n        result[result.length - 1] = uint32(\\n            valuesController.tryGetValue(\\\"extraColours\\\")\\n        );\\n    }\\n\\n    function setPathDisabled(uint32 pathId, bool value) public onlyApproved {\\n        //if path zero is suddenly disabled, we need a new safe path to return\\n        if (pathId == safeDefaultReturnPath && value) {\\n            uint256 val = (safeDefaultReturnPath);\\n            while (disabledPaths[val]) {\\n                if (val >= pathCount) val = safeDefaultReturnPath;\\n                val++;\\n            }\\n            safeDefaultReturnPath = val;\\n        }\\n\\n        //if we enable zero again then its safe to return 0\\n        if (pathId <= safeDefaultReturnPath && value)\\n            safeDefaultReturnPath = pathId;\\n\\n        disabledPaths[pathId] = value;\\n    }\\n\\n    function setPathCount(uint256 newPathCount) public onlyApproved {\\n        pathCount = newPathCount;\\n    }\\n}\\n\",\"keccak256\":\"0xb24b09771d85bf1603edcc935294c731275567dd72387cce498736c37fd65003\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintObject.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\n//this is implemented by every contract in our system\\nimport \\\"./InfinityMintUtil.sol\\\";\\nimport \\\"./InfinityMintValues.sol\\\";\\n\\nabstract contract InfinityMintObject {\\n    /// @notice The main InfinityMint object, TODO: Work out a way for this to easily be modified\\n    struct InfinityObject {\\n        uint32 pathId;\\n        uint32 pathSize;\\n        uint32 currentTokenId;\\n        address owner;\\n        uint32[] colours;\\n        bytes mintData;\\n        uint32[] assets;\\n        string[] names;\\n        address[] destinations;\\n    }\\n\\n    /// @notice Creates a new struct from arguments\\n    /// @dev Stickers are not set through this, structs cannot be made with sticker contracts already set and have to be set manually\\n    /// @param currentTokenId the tokenId,\\n    /// @param pathId the infinity mint paths id\\n    /// @param pathSize the size of the path (only for vectors)\\n    /// @param assets the assets which make up the token\\n    /// @param names the names of the token, its just the name but split by the splaces.\\n    /// @param colours decimal colours which will be convered to hexadecimal colours\\n    /// @param mintData variable dynamic field which is passed to ERC721 Implementor contracts and used in a lot of dynamic stuff\\n    /// @param _sender aka the owner of the token\\n    /// @param destinations a list of contracts associated with this token\\n    function createInfinityObject(\\n        uint32 currentTokenId,\\n        uint32 pathId,\\n        uint32 pathSize,\\n        uint32[] memory assets,\\n        string[] memory names,\\n        uint32[] memory colours,\\n        bytes memory mintData,\\n        address _sender,\\n        address[] memory destinations\\n    ) internal pure returns (InfinityObject memory) {\\n        return\\n            InfinityObject(\\n                pathId,\\n                pathSize,\\n                currentTokenId,\\n                _sender, //the sender aka owner\\n                colours,\\n                mintData,\\n                assets,\\n                names,\\n                destinations\\n            );\\n    }\\n\\n    /// @notice basically unpacks a return object into bytes.\\n    function encode(InfinityObject memory data)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encode(\\n                data.pathId,\\n                data.pathSize,\\n                data.currentTokenId,\\n                data.owner,\\n                abi.encode(data.colours),\\n                data.mintData,\\n                data.assets,\\n                data.names,\\n                data.destinations\\n            );\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function sender() internal view returns (address) {\\n        return (msg.sender);\\n    }\\n\\n    /// @notice Copied behavours of the open zeppelin content due to prevent msg.sender rewrite through assembly\\n    function value() internal view returns (uint256) {\\n        return (msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xe47b88d98889304cc2e47c41a78ef5534d33ad9548970524f3b72390d7e08e3a\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintUtil.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nlibrary InfinityMintUtil {\\n    function toString(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function filepath(\\n        string memory directory,\\n        string memory file,\\n        string memory extension\\n    ) internal pure returns (string memory) {\\n        return\\n            abi.decode(abi.encodePacked(directory, file, extension), (string));\\n    }\\n\\n    //checks if two strings (or bytes) are equal\\n    function isEqual(bytes memory s1, bytes memory s2)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory b1 = bytes(s1);\\n        bytes memory b2 = bytes(s2);\\n        uint256 l1 = b1.length;\\n        if (l1 != b2.length) return false;\\n        for (uint256 i = 0; i < l1; i++) {\\n            //check each byte\\n            if (b1[i] != b2[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x414a2931293db93950726b75c54b8083051b1004291fd70bac069ad5d769bc53\",\"license\":\"UNLICENSED\"},\"contracts/InfinityMintValues.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\ncontract InfinityMintValues {\\n    mapping(string => uint256) private values;\\n    mapping(string => bool) private booleanValues;\\n    mapping(string => bool) private registeredValues;\\n\\n    address deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer() {\\n        if (msg.sender != deployer) revert();\\n        _;\\n    }\\n\\n    function setValue(string memory key, uint256 value) public onlyDeployer {\\n        values[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function setupValues(\\n        string[] memory keys,\\n        uint256[] memory _values,\\n        string[] memory booleanKeys,\\n        bool[] memory _booleanValues\\n    ) public onlyDeployer {\\n        require(keys.length == _values.length);\\n        require(booleanKeys.length == _booleanValues.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            setValue(keys[i], _values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < booleanKeys.length; i++) {\\n            setBooleanValue(booleanKeys[i], _booleanValues[i]);\\n        }\\n    }\\n\\n    function setBooleanValue(string memory key, bool value)\\n        public\\n        onlyDeployer\\n    {\\n        booleanValues[key] = value;\\n        registeredValues[key] = true;\\n    }\\n\\n    function isTrue(string memory key) external view returns (bool) {\\n        return booleanValues[key];\\n    }\\n\\n    function getValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) revert(\\\"Invalid Value\\\");\\n\\n        return values[key];\\n    }\\n\\n    /// @dev Default value it returns is zero\\n    function tryGetValue(string memory key) external view returns (uint256) {\\n        if (!registeredValues[key]) return 0;\\n\\n        return values[key];\\n    }\\n}\\n\",\"keccak256\":\"0xa3df569a4c7a710808d576eb4608fd23656a38ab04fb2288a5cc341d9d65c78a\",\"license\":\"UNLICENSED\"},\"contracts/RandomNumber.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InfinityMintValues.sol\\\";\\n\\n/// @title InfinityMint Random Number Abstract Contract\\n/// @author Llydia Cross\\nabstract contract RandomNumber {\\n    uint256 public randomnessFactor;\\n    bool public hasDeployed = false;\\n    uint256 public salt = 1;\\n\\n    InfinityMintValues internal valuesController;\\n\\n    constructor(address valuesContract) {\\n        valuesController = InfinityMintValues(valuesContract);\\n        randomnessFactor = valuesController.getValue(\\\"randomessFactor\\\");\\n    }\\n\\n    function getNumber() external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(valuesController.getValue(\\\"maxRandomNumber\\\"), salt);\\n    }\\n\\n    function getMaxNumber(uint256 maxNumber) external returns (uint256) {\\n        unchecked {\\n            ++salt;\\n        }\\n\\n        return returnNumber(maxNumber, salt);\\n    }\\n\\n    /// @notice cheap return number\\n    function returnNumber(uint256 maxNumber, uint256 _salt)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (maxNumber <= 0) maxNumber = 1;\\n        return (_salt + 3) % maxNumber;\\n    }\\n}\\n\",\"keccak256\":\"0xb6626181ed123ae8432c02ec7c68a2edc982f08ede6e71917656524aa9211d57\",\"license\":\"UNLICENSED\"},\"contracts/assets/SimpleImage.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n//llydia cross 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"../InfinityMintAsset.sol\\\";\\n\\ncontract SimpleImage is InfinityMintAsset {\\n    /**\\n\\n\\t */\\n    constructor(string memory _tokenName, address valuesContract)\\n        InfinityMintAsset(valuesContract)\\n    {\\n        tokenName = _tokenName;\\n        assetsType = \\\"image\\\";\\n    }\\n\\n    function getNextPathId(RandomNumber randomNumberController)\\n        public\\n        virtual\\n        override\\n        returns (uint32)\\n    {\\n        if (pathCount == 1 && disabledPaths[safeDefaultReturnPath])\\n            revert(\\\"No valid paths\\\");\\n\\n        if (valuesController.isTrue(\\\"incrementalMode\\\")) {\\n            nextPath = lastPath++;\\n            if (nextPath >= pathCount) {\\n                lastPath = uint32(safeDefaultReturnPath);\\n                nextPath = uint32(safeDefaultReturnPath);\\n            }\\n            while (disabledPaths[nextPath]) {\\n                if (nextPath >= pathCount)\\n                    nextPath = uint32(safeDefaultReturnPath);\\n                nextPath++;\\n            }\\n            return nextPath;\\n        } else {\\n            uint32 pathId = uint32(\\n                randomNumberController.getMaxNumber(pathCount)\\n            );\\n\\n            if (disabledPaths[pathId] || pathId >= pathCount)\\n                pathId = uint32(safeDefaultReturnPath);\\n\\n            return pathId;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50c2c5a09ebf9757c2e5a2bd105cc1df41c2be0ad021a9ac9cb0634ee6475768\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264185cdcd95d60da1b60a090815262000028916006919062000169565b5060408051808201909152600780825266191959985d5b1d60ca1b602090920191825262000057918162000169565b50600f80546001600160401b03191690556011805460ff191690553480156200007f57600080fd5b5060405162003cb838038062003cb8833981016040819052620000a29162000242565b60008054336001600160a01b03199182168117835582526002602090815260408320805460ff19166001908117909155838155600580549093166001600160a01b03861617909255600d8054928301815583527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590910191909155825162000131916006919085019062000169565b5060408051808201909152600580825264696d61676560d81b6020909201918252620001609160079162000169565b50505062000370565b828054620001779062000333565b90600052602060002090601f0160209004810192826200019b5760008555620001e6565b82601f10620001b657805160ff1916838001178555620001e6565b82800160010185558215620001e6579182015b82811115620001e6578251825591602001919060010190620001c9565b50620001f4929150620001f8565b5090565b5b80821115620001f45760008155600101620001f9565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023d57600080fd5b919050565b600080604083850312156200025657600080fd5b82516001600160401b03808211156200026e57600080fd5b818501915085601f8301126200028357600080fd5b8151818111156200029857620002986200020f565b604051601f8201601f19908116603f01168101908382118183101715620002c357620002c36200020f565b81604052828152602093508884848701011115620002e057600080fd5b600091505b82821015620003045784820184015181830185015290830190620002e5565b82821115620003165760008484830101525b95506200032891505085820162000225565b925050509250929050565b600181811c908216806200034857607f821691505b602082108114156200036a57634e487b7160e01b600052602260045260246000fd5b50919050565b61393880620003806000396000f3fe608060405234801561001057600080fd5b50600436106101d25760003560e01c80638e6e826d116101005780638e6e826d14610389578063a57b3b45146103a9578063a85f3298146103bc578063b895bcb7146103cf578063bfb05d03146103e2578063c40f4a25146103f5578063d15d415014610408578063d5f394881461041b578063d8b964e614610446578063d935232c14610469578063dccd935c1461047c578063e6ef895514610484578063e7214f4f14610497578063e96aeef3146104aa578063eb2c2da3146104bd578063f2fde38b146104d0578063f60a7436146104e3578063fe684c0e146104f6578063ff220d6d1461050957600080fd5b80630b71d256146101d757806310a8c7a9146101ec57806311456b47146101ff5780633406bfac1461021257806335697ba71461021a5780633840c21a146102435780633982e0c414610256578063433ee8cd1461026957806343bebe4e14610289578063453dc933146102b157806346e4e7c9146102c45780634c6fe6a2146102d2578063593c7b27146102f25780637730f4fa146103055780637ba8dcd6146103285780637bd6ec4a1461033d5780637cf8031e146103505780638a25ad24146103635780638c9fcab914610376575b600080fd5b6101ea6101e5366004612e4d565b610511565b005b6101ea6101fa366004612ee4565b6105a4565b6101ea61020d366004612ff1565b61063b565b6101ea6106c2565b61022d610228366004612e4d565b610761565b60405161023a919061302d565b60405180910390f35b6101ea610251366004613071565b6107c3565b6101ea610264366004613143565b61081a565b61027c61027736600461317a565b610903565b60405161023a9190613289565b61029c610297366004613325565b610927565b60405163ffffffff909116815260200161023a565b6101ea6102bf366004613071565b610987565b600f5463ffffffff1661029c565b6102e56102e0366004613340565b610a34565b60405161023a9190613365565b6101ea6103003660046133e5565b611057565b610318610313366004613325565b6110ae565b604051901515815260200161023a565b6103306110df565b60405161023a9190613419565b61027c61034b36600461342c565b61116d565b6101ea61035e3660046134ce565b611361565b6101ea610371366004613325565b6113ce565b61022d610384366004612e4d565b611438565b61039c61039736600461317a565b6114ab565b60405161023a9190613502565b6101ea6103b7366004613515565b611b2d565b6101ea6103ca366004612e4d565b611bc2565b61029c6103dd366004613548565b611c0b565b6101ea6103f036600461356c565b611eb7565b6101ea6104033660046133e5565b611f1d565b610318610416366004613548565b611f94565b60005461042e906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b610318610454366004613548565b60026020526000908152604090205460ff1681565b6101ea610477366004613325565b611fcb565b6101ea61202b565b6101ea6104923660046135b9565b61207d565b6101ea6104a53660046133e5565b612133565b6103306104b836600461342c565b61218a565b61039c6104cb36600461317a565b6121aa565b6101ea6104de366004613548565b612792565b6101ea6104f13660046134ce565b612832565b6101ea61050436600461368d565b612930565b6101ea612a12565b6000546001600160a01b031633146105445760405162461bcd60e51b815260040161053b906136ab565b60405180910390fd5b606481111561055257600080fd5b600d80546001818101835560009283527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600b80549192909161059c9084906136e7565b909155505050565b6000546001600160a01b031633146105ce5760405162461bcd60e51b815260040161053b906136ab565b80516105d957600080fd5b60005b8151811015610637576001600260008484815181106105fd576105fd6136ff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016105dc565b5050565b6000546001600160a01b031633148061066357503360009081526002602052604090205460ff165b61067f5760405162461bcd60e51b815260040161053b90613715565b601080546001810182556000919091528151610637917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201906020840190612b00565b6000546001600160a01b03163314806106ea57503360009081526002602052604090205460ff165b6107065760405162461bcd60e51b815260040161053b90613715565b610712600d6000612b84565b61071e600c6000612ba5565b600d805460018101825560009182527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501819055600b556011805460ff19169055565b6000818152600460209081526040918290208054835181840281018401909452808452606093928301828280156107b757602002820191906000526020600020905b8154815260200190600101908083116107a3575b50505050509050919050565b6000546001600160a01b03163314806107eb57503360009081526002602052604090205460ff165b6108075760405162461bcd60e51b815260040161053b90613715565b8051610637906010906020840190612bc3565b6000546001600160a01b031633148061084257503360009081526002602052604090205460ff165b61085e5760405162461bcd60e51b815260040161053b90613715565b600a548263ffffffff161480156108725750805b156108b657600a545b60008181526003602052604090205460ff16156108b25760085481106108a05750600a545b806108aa8161373b565b91505061087b565b600a555b600a548263ffffffff16111580156108cb5750805b156108db5763ffffffff8216600a555b63ffffffff919091166000908152600360205260409020805460ff1916911515919091179055565b61090b612c1c565b61091e61091783611c0b565b848461116d565b90505b92915050565b60095460009063ffffffff83161061094157506001919050565b60098263ffffffff168154811061095a5761095a6136ff565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050919050565b6000546001600160a01b03163314806109af57503360009081526002602052604090205460ff165b6109cb5760405162461bcd60e51b815260040161053b90613715565b60648151106109d957600080fd5b60005b81518110156106375760108282815181106109f9576109f96136ff565b60209081029190910181015182546001810184556000938452928290208151610a2b9491909101929190910190612b00565b506001016109dc565b60606000610a40612a6e565b6005546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201529192506001600160a01b031690630312c88090606401602060405180830381865afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190613756565b158015610b4057506005546040516206259160e71b81526001600160a01b0390911690630312c88090610afd90600401613773565b602060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e9190613756565b155b15610e2d5783158015610bda57506005546040516206259160e71b815260206004820152601060248201526f6d75737447656e65726174654e616d6560801b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda9190613756565b15610be457600193505b831580610bf15750601054155b15610c475760408051600180825281830190925290816020015b6060815260200190600190039081610c0b5790505091508082600081518110610c3657610c366136ff565b602002602001018190525050610921565b610c528460016136e7565b6001600160401b03811115610c6957610c69612e66565b604051908082528060200260200182016040528015610c9c57816020015b6060815260200190600190039081610c875790505b50915060005b848163ffffffff161015610e095760105460405163a0d0ca0f60e01b81526000916001600160a01b0387169163a0d0ca0f91610ce49160040190815260200190565b6020604051808303816000875af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d27919061379c565b6010549091508110610d37575060005b60108181548110610d4a57610d4a6136ff565b906000526020600020018054610d5f906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8b906137b5565b8015610dd85780601f10610dad57610100808354040283529160200191610dd8565b820191906000526020600020905b815481529060010190602001808311610dbb57829003601f168201915b5050505050848363ffffffff1681518110610df557610df56136ff565b602090810291909101015250600101610ca2565b5080828581518110610e1d57610e1d6136ff565b6020026020010181905250611050565b6040805160028082526060820190925290816020015b6060815260200190600190039081610e43575050601054909250610e94576040518060200160405280600081525082600081518110610e8457610e846136ff565b6020026020010181905250611030565b601054600f5463ffffffff161015610f6a57600f5460108054909163ffffffff16908110610ec457610ec46136ff565b906000526020600020018054610ed9906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f05906137b5565b8015610f525780601f10610f2757610100808354040283529160200191610f52565b820191906000526020600020905b815481529060010190602001808311610f3557829003601f168201915b505050505082600081518110610e8457610e846136ff565b6010600081548110610f7e57610f7e6136ff565b906000526020600020018054610f93906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbf906137b5565b801561100c5780601f10610fe15761010080835404028352916020019161100c565b820191906000526020600020905b815481529060010190602001808311610fef57829003601f168201915b505050505082600081518110611024576110246136ff565b60200260200101819052505b8082600181518110611044576110446136ff565b60200260200101819052505b5092915050565b6000546001600160a01b031633148061107f57503360009081526002602052604090205460ff165b61109b5760405162461bcd60e51b815260040161053b90613715565b8051610637906009906020840190612c5e565b60006008548263ffffffff1610801561092157505063ffffffff1660009081526003602052604090205460ff161590565b600780546110ec906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611118906137b5565b80156111655780601f1061113a57610100808354040283529160200191611165565b820191906000526020600020905b81548152906001019060200180831161114857829003601f168201915b505050505081565b611175612c1c565b61117e84611fcb565b61118b6104a585846114ab565b6040518060c001604052808563ffffffff1681526020016111ab86610927565b63ffffffff168152602001600e80548060200260200160405190810160405280929190818152602001828054801561122e57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116111f15790505b505050918352505060055460405163e7b6dac960e01b815260206004820181905260096024830152681b985b5950dbdd5b9d60ba1b604483015290920191611338916001600160a01b038781169263a0d0ca0f92919091169063e7b6dac990606401602060405180830381865afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d1919061379c565b6040518263ffffffff1660e01b81526004016112ef91815260200190565b6020604051808303816000875af115801561130e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611332919061379c565b85610a34565b815260200161134786856121aa565b815260200161135786868661218a565b9052949350505050565b6000546001600160a01b0316331461138b5760405162461bcd60e51b815260040161053b906136ab565b600c80546001810182556000919091528151610637917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701906020840190612d08565b6000546001600160a01b03163314806113f657503360009081526002602052604090205460ff165b6114125760405162461bcd60e51b815260040161053b90613715565b600f805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6060600c828154811061144d5761144d6136ff565b906000526020600020018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020908154815260200190600101908083116107a35750505050509050919050565b6060600b54600014156114bd57610921565b60115460609060ff16156115465760008052600460209081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec805460408051828502810185019091528181529283018282801561153a57602002820191906000526020600020905b815481526020019060010190808311611526575b505050505090506115a9565b63ffffffff8416600090815260046020908152604091829020805483518184028101840190945280845290918301828280156115a157602002820191906000526020600020905b81548152602001906001019080831161158d575b505050505090505b600080846001600160a01b031663bfa0b1336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e919061379c565b905082516000141561162257505050610921565b82516001600160401b0381111561163b5761163b612e66565b604051908082528060200260200182016040528015611664578160200160208202803683370190505b50935060608060005b8551811015611b2157600c86828151811061168a5761168a6136ff565b6020026020010151815481106116a2576116a26136ff565b906000526020600020018054806020026020016040519081016040528092919081815260200182805480156116f657602002820191906000526020600020905b8154815260200190600101908083116116e2575b5050505050915081516000141561174357600087866117148161373b565b975081518110611726576117266136ff565b63ffffffff9092166020928302919091019091015260010161166d565b8151600114801561178b5750600d82600081518110611764576117646136ff565b60200260200101518154811061177c5761177c6136ff565b90600052602060002001546064145b156117b757816000815181106117a3576117a36136ff565b60200260200101518786806117149061373b565b81516001600160401b038111156117d0576117d0612e66565b6040519080825280602002602001820160405280156117f9578160200160208202803683370190505b5092506000805b83518110156119bd578451821415611817576119bd565b838181518110611829576118296136ff565b60200260200101516000141561184157600101611800565b6000848281518110611855576118556136ff565b6020026020010151600d8054905011156118a357600d85838151811061187d5761187d6136ff565b602002602001015181548110611895576118956136ff565b906000526020600020015490505b806064148061195c57506001600160a01b038b16634b0c7aad60648a8a87866118cc898c6136e7565b6118d691906136e7565b6118e091906136e7565b6118ea91906136e7565b6118f491906136e7565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611959919061379c565b81115b156119b457848281518110611973576119736136ff565b60200260200101518684806119879061373b565b955081518110611999576119996136ff565b602002602001019063ffffffff16908163ffffffff16815250505b50600101611800565b50600060018211611a2057846000815181106119db576119db6136ff565b60200260200101518988806119ef9061373b565b995081518110611a0157611a016136ff565b602002602001019063ffffffff16908163ffffffff1681525050611b17565b60028210611b1757896001600160a01b0316634b0c7aad83888a868a51611a4791906136e7565b611a5191906136e7565b611a5b91906136e7565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac0919061379c565b90508451811015611add578481815181106119db576119db6136ff565b60008988611aea8161373b565b995081518110611afc57611afc6136ff565b602002602001019063ffffffff16908163ffffffff16815250505b505060010161166d565b50505050505092915050565b6000546001600160a01b0316331480611b5557503360009081526002602052604090205460ff165b611b715760405162461bcd60e51b815260040161053b90613715565b8060098363ffffffff1681548110611b8b57611b8b6136ff565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000546001600160a01b0316331480611bea57503360009081526002602052604090205460ff165b611c065760405162461bcd60e51b815260040161053b90613715565b600855565b60006008546001148015611c305750600a5460009081526003602052604090205460ff165b15611c6e5760405162461bcd60e51b815260206004820152600e60248201526d4e6f2076616c696420706174687360901b604482015260640161053b565b6005546040516206259160e71b81526001600160a01b0390911690630312c88090611c9b90600401613773565b602060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdc9190613756565b15611dfd57600f8054600160201b900463ffffffff16906004611cfe836137f0565b82546101009290920a63ffffffff818102199093169183160217909155600f805463ffffffff191692909116918217905560085411611d6757600a54600f805467ffffffffffffffff1916600160201b63ffffffff90931692830263ffffffff19161790911790555b600f5463ffffffff1660009081526003602052604090205460ff1615611def57600854600f5463ffffffff1610611db557600a54600f805463ffffffff191663ffffffff9092169190911790555b600f805463ffffffff16906000611dcb836137f0565b91906101000a81548163ffffffff021916908363ffffffff16021790555050611d67565b5050600f5463ffffffff1690565b60085460405163a0d0ca0f60e01b81526000916001600160a01b0385169163a0d0ca0f91611e319160040190815260200190565b6020604051808303816000875af1158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e74919061379c565b63ffffffff811660009081526003602052604090205490915060ff1680611ea357506008548163ffffffff1610155b156109215750600a5492915050565b919050565b6000546001600160a01b03163314611ee15760405162461bcd60e51b815260040161053b906136ab565b80600c8363ffffffff1681548110611efb57611efb6136ff565b906000526020600020019080519060200190611f18929190612d08565b505050565b6000546001600160a01b03163314611f475760405162461bcd60e51b815260040161053b906136ab565b60008052600460209081528151611f83917f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec9190840190612d42565b50506011805460ff19166001179055565b600080546001600160a01b03838116911614806109215750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b0316331480611ff357503360009081526002602052604090205460ff165b61200f5760405162461bcd60e51b815260040161053b90613715565b600f805463ffffffff191663ffffffff92909216919091179055565b6000546001600160a01b031633148061205357503360009081526002602052604090205460ff165b61206f5760405162461bcd60e51b815260040161053b90613715565b61207b60106000612d85565b565b6000546001600160a01b031633146120a75760405162461bcd60e51b815260040161053b906136ab565b80518251146120b557600080fd5b60005b8251811015611f18578181815181106120d3576120d36136ff565b6020026020010151600460008584815181106120f1576120f16136ff565b602002602001015163ffffffff1681526020019081526020016000209080519060200190612120929190612d08565b508061212b8161373b565b9150506120b8565b6000546001600160a01b031633148061215b57503360009081526002602052604090205460ff165b6121775760405162461bcd60e51b815260040161053b90613715565b805161063790600e906020840190612c5e565b6040805180820190915260028152617b7d60f01b60208201529392505050565b606060006121b784610927565b60055460405163e7b6dac960e01b815260206004820152600f60248201526e636f6c6f75724368756e6b53697a6560881b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612249919061379c565b905060008111612257575060045b808263ffffffff161161247e5760408051600480825260a0820190925290602082016080803683370190505060405163a0d0ca0f60e01b815262ffffff60048201529093506001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af11580156122cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f3919061379c565b83600081518110612306576123066136ff565b602002602001019063ffffffff16908163ffffffff16815250508183600181518110612334576123346136ff565b63ffffffff928316602091820292909201015260405163a0d0ca0f60e01b815260048101919091526001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af115801561238f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b3919061379c565b836002815181106123c6576123c66136ff565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061240990600401613814565b602060405180830381865afa158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a919061379c565b8360038151811061245d5761245d6136ff565b602002602001019063ffffffff16908163ffffffff16815250505050610921565b60006124908263ffffffff8516613850565b61249b9060016136e7565b905060006124aa826002613864565b90508360006124ba836002613890565b63ffffffff166001600160401b038111156124d7576124d7612e66565b604051908082528060200260200182016040528015612500578160200160208202803683370190505b50965060005b8363ffffffff1681101561263b5780158061252957506125276002826138b8565b155b156125cc5760405163a0d0ca0f60e01b815262ffffff60048201526001600160a01b038a169063a0d0ca0f906024016020604051808303816000875af1158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b919061379c565b8882815181106125ad576125ad6136ff565b602002602001019063ffffffff16908163ffffffff1681525050612633565b6000826125d88161373b565b93506125e490886138cc565b6125f49063ffffffff86166138eb565b90508681116126035780612605565b865b898381518110612617576126176136ff565b602002602001019063ffffffff16908163ffffffff1681525050505b600101612506565b5060405163a0d0ca0f60e01b815263ffffffff60048201526001600160a01b0389169063a0d0ca0f906024016020604051808303816000875af1158015612686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126aa919061379c565b87600289516126b991906138eb565b815181106126c9576126c96136ff565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061270c90600401613814565b602060405180830381865afa158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d919061379c565b876001895161275c91906138eb565b8151811061276c5761276c6136ff565b602002602001019063ffffffff16908163ffffffff168152505050505050505092915050565b6000546001600160a01b031633146127bc5760405162461bcd60e51b815260040161053b906136ab565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b0316331461285c5760405162461bcd60e51b815260040161053b906136ab565b60005b815181101561063757606482828151811061287c5761287c6136ff565b602002602001015111156128dd5760405162461bcd60e51b815260206004820152602260248201527f6f6e65206f66206d6f7265207261726974696573206172652061626f76652031604482015261030360f41b606482015260840161053b565b600d8282815181106128f1576128f16136ff565b60209081029190910181015182546001818101855560009485529284200155600b8054919290916129239084906136e7565b909155505060010161285f565b6000546001600160a01b0316331461295a5760405162461bcd60e51b815260040161053b906136ab565b6000546001600160a01b03838116911614156129b15760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b604482015260640161053b565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b6000546001600160a01b0316331480612a3a57503360009081526002602052604090205460ff165b612a565760405162461bcd60e51b815260040161053b90613715565b612a6260096000612da3565b60006008819055600a55565b606060068054612a7d906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054612aa9906137b5565b8015612af65780601f10612acb57610100808354040283529160200191612af6565b820191906000526020600020905b815481529060010190602001808311612ad957829003601f168201915b5050505050905090565b828054612b0c906137b5565b90600052602060002090601f016020900481019282612b2e5760008555612b74565b82601f10612b4757805160ff1916838001178555612b74565b82800160010185558215612b74579182015b82811115612b74578251825591602001919060010190612b59565b50612b80929150612dc4565b5090565b5080546000825590600052602060002090810190612ba29190612dc4565b50565b5080546000825590600052602060002090810190612ba29190612dd9565b828054828255906000526020600020908101928215612c10579160200282015b82811115612c105782518051612c00918491602090910190612b00565b5091602001919060010190612be3565b50612b80929150612df6565b6040518060c00160405280600063ffffffff168152602001600063ffffffff168152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090600701600890048101928215612b745791602002820160005b83821115612ccb57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612c87565b8015612cfb5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612ccb565b5050612b80929150612dc4565b828054828255906000526020600020908101928215612b745791602002820182811115612b74578251825591602001919060010190612b59565b828054828255906000526020600020908101928215612b74579160200282015b82811115612b74578251829063ffffffff16905591602001919060010190612d62565b5080546000825590600052602060002090810190612ba29190612df6565b508054600082556007016008900490600052602060002090810190612ba291905b5b80821115612b805760008155600101612dc5565b80821115612b80576000612ded8282612b84565b50600101612dd9565b80821115612b80576000612e0a8282612e13565b50600101612df6565b508054612e1f906137b5565b6000825580601f10612e2f575050565b601f016020900490600052602060002090810190612ba29190612dc4565b600060208284031215612e5f57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612ea457612ea4612e66565b604052919050565b60006001600160401b03821115612ec557612ec5612e66565b5060051b60200190565b6001600160a01b0381168114612ba257600080fd5b60006020808385031215612ef757600080fd5b82356001600160401b03811115612f0d57600080fd5b8301601f81018513612f1e57600080fd5b8035612f31612f2c82612eac565b612e7c565b81815260059190911b82018301908381019087831115612f5057600080fd5b928401925b82841015612f77578335612f6881612ecf565b82529284019290840190612f55565b979650505050505050565b600082601f830112612f9357600080fd5b81356001600160401b03811115612fac57612fac612e66565b612fbf601f8201601f1916602001612e7c565b818152846020838601011115612fd457600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561300357600080fd5b81356001600160401b0381111561301957600080fd5b61302584828501612f82565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561306557835183529284019291840191600101613049565b50909695505050505050565b6000602080838503121561308457600080fd5b82356001600160401b038082111561309b57600080fd5b818501915085601f8301126130af57600080fd5b81356130bd612f2c82612eac565b81815260059190911b830184019084810190888311156130dc57600080fd5b8585015b83811015613114578035858111156130f85760008081fd5b6131068b89838a0101612f82565b8452509186019186016130e0565b5098975050505050505050565b803563ffffffff81168114611eb257600080fd5b8015158114612ba257600080fd5b6000806040838503121561315657600080fd5b61315f83613121565b9150602083013561316f81613135565b809150509250929050565b6000806040838503121561318d57600080fd5b61319683613121565b9150602083013561316f81612ecf565b600081518084526020808501945080840160005b838110156131dc57815163ffffffff16875295820195908201906001016131ba565b509495945050505050565b6000815180845260005b8181101561320d576020818501810151868301820152016131f1565b8181111561321f576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101561327c57828403895261326a8483516131e7565b98850198935090840190600101613252565b5091979650505050505050565b60208152600063ffffffff80845116602084015280602085015116604084015250604083015160c060608401526132c360e08401826131a6565b90506060840151601f19808584030160808601526132e18383613234565b925060808601519150808584030160a08601526132fe83836131a6565b925060a08601519150808584030160c08601525061331c82826131e7565b95945050505050565b60006020828403121561333757600080fd5b61091e82613121565b6000806040838503121561335357600080fd5b82359150602083013561316f81612ecf565b60208152600061091e6020830184613234565b600082601f83011261338957600080fd5b81356020613399612f2c83612eac565b82815260059290921b840181019181810190868411156133b857600080fd5b8286015b848110156133da576133cd81613121565b83529183019183016133bc565b509695505050505050565b6000602082840312156133f757600080fd5b81356001600160401b0381111561340d57600080fd5b61302584828501613378565b60208152600061091e60208301846131e7565b60008060006060848603121561344157600080fd5b61344a84613121565b925061345860208501613121565b9150604084013561346881612ecf565b809150509250925092565b600082601f83011261348457600080fd5b81356020613494612f2c83612eac565b82815260059290921b840181019181810190868411156134b357600080fd5b8286015b848110156133da57803583529183019183016134b7565b6000602082840312156134e057600080fd5b81356001600160401b038111156134f657600080fd5b61302584828501613473565b60208152600061091e60208301846131a6565b6000806040838503121561352857600080fd5b61353183613121565b915061353f60208401613121565b90509250929050565b60006020828403121561355a57600080fd5b813561356581612ecf565b9392505050565b6000806040838503121561357f57600080fd5b61358883613121565b915060208301356001600160401b038111156135a357600080fd5b6135af85828601613473565b9150509250929050565b600080604083850312156135cc57600080fd5b82356001600160401b03808211156135e357600080fd5b6135ef86838701613378565b935060209150818501358181111561360657600080fd5b8501601f8101871361361757600080fd5b8035613625612f2c82612eac565b81815260059190911b8201840190848101908983111561364457600080fd5b8584015b8381101561367c578035868111156136605760008081fd5b61366e8c8983890101613473565b845250918601918601613648565b508096505050505050509250929050565b600080604083850312156136a057600080fd5b823561315f81612ecf565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156136fa576136fa6136d1565b500190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b600060001982141561374f5761374f6136d1565b5060010190565b60006020828403121561376857600080fd5b815161356581613135565b6020808252600f908201526e696e6372656d656e74616c4d6f646560881b604082015260600190565b6000602082840312156137ae57600080fd5b5051919050565b600181811c908216806137c957607f821691505b602082108114156137ea57634e487b7160e01b600052602260045260246000fd5b50919050565b600063ffffffff8083168181141561380a5761380a6136d1565b6001019392505050565b6020808252600c908201526b6578747261436f6c6f75727360a01b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261385f5761385f61383a565b500490565b600063ffffffff80831681851681830481118215151615613887576138876136d1565b02949350505050565b600063ffffffff8083168185168083038211156138af576138af6136d1565b01949350505050565b6000826138c7576138c761383a565b500690565b60008160001904831182151516156138e6576138e66136d1565b500290565b6000828210156138fd576138fd6136d1565b50039056fea2646970667358221220a90b31ab919726aa7dd3f3a40bf7f0e9ceeec8eeb225584e8bb9aa2f2263db9864736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d25760003560e01c80638e6e826d116101005780638e6e826d14610389578063a57b3b45146103a9578063a85f3298146103bc578063b895bcb7146103cf578063bfb05d03146103e2578063c40f4a25146103f5578063d15d415014610408578063d5f394881461041b578063d8b964e614610446578063d935232c14610469578063dccd935c1461047c578063e6ef895514610484578063e7214f4f14610497578063e96aeef3146104aa578063eb2c2da3146104bd578063f2fde38b146104d0578063f60a7436146104e3578063fe684c0e146104f6578063ff220d6d1461050957600080fd5b80630b71d256146101d757806310a8c7a9146101ec57806311456b47146101ff5780633406bfac1461021257806335697ba71461021a5780633840c21a146102435780633982e0c414610256578063433ee8cd1461026957806343bebe4e14610289578063453dc933146102b157806346e4e7c9146102c45780634c6fe6a2146102d2578063593c7b27146102f25780637730f4fa146103055780637ba8dcd6146103285780637bd6ec4a1461033d5780637cf8031e146103505780638a25ad24146103635780638c9fcab914610376575b600080fd5b6101ea6101e5366004612e4d565b610511565b005b6101ea6101fa366004612ee4565b6105a4565b6101ea61020d366004612ff1565b61063b565b6101ea6106c2565b61022d610228366004612e4d565b610761565b60405161023a919061302d565b60405180910390f35b6101ea610251366004613071565b6107c3565b6101ea610264366004613143565b61081a565b61027c61027736600461317a565b610903565b60405161023a9190613289565b61029c610297366004613325565b610927565b60405163ffffffff909116815260200161023a565b6101ea6102bf366004613071565b610987565b600f5463ffffffff1661029c565b6102e56102e0366004613340565b610a34565b60405161023a9190613365565b6101ea6103003660046133e5565b611057565b610318610313366004613325565b6110ae565b604051901515815260200161023a565b6103306110df565b60405161023a9190613419565b61027c61034b36600461342c565b61116d565b6101ea61035e3660046134ce565b611361565b6101ea610371366004613325565b6113ce565b61022d610384366004612e4d565b611438565b61039c61039736600461317a565b6114ab565b60405161023a9190613502565b6101ea6103b7366004613515565b611b2d565b6101ea6103ca366004612e4d565b611bc2565b61029c6103dd366004613548565b611c0b565b6101ea6103f036600461356c565b611eb7565b6101ea6104033660046133e5565b611f1d565b610318610416366004613548565b611f94565b60005461042e906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b610318610454366004613548565b60026020526000908152604090205460ff1681565b6101ea610477366004613325565b611fcb565b6101ea61202b565b6101ea6104923660046135b9565b61207d565b6101ea6104a53660046133e5565b612133565b6103306104b836600461342c565b61218a565b61039c6104cb36600461317a565b6121aa565b6101ea6104de366004613548565b612792565b6101ea6104f13660046134ce565b612832565b6101ea61050436600461368d565b612930565b6101ea612a12565b6000546001600160a01b031633146105445760405162461bcd60e51b815260040161053b906136ab565b60405180910390fd5b606481111561055257600080fd5b600d80546001818101835560009283527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909101839055600b80549192909161059c9084906136e7565b909155505050565b6000546001600160a01b031633146105ce5760405162461bcd60e51b815260040161053b906136ab565b80516105d957600080fd5b60005b8151811015610637576001600260008484815181106105fd576105fd6136ff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016105dc565b5050565b6000546001600160a01b031633148061066357503360009081526002602052604090205460ff165b61067f5760405162461bcd60e51b815260040161053b90613715565b601080546001810182556000919091528151610637917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201906020840190612b00565b6000546001600160a01b03163314806106ea57503360009081526002602052604090205460ff165b6107065760405162461bcd60e51b815260040161053b90613715565b610712600d6000612b84565b61071e600c6000612ba5565b600d805460018101825560009182527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501819055600b556011805460ff19169055565b6000818152600460209081526040918290208054835181840281018401909452808452606093928301828280156107b757602002820191906000526020600020905b8154815260200190600101908083116107a3575b50505050509050919050565b6000546001600160a01b03163314806107eb57503360009081526002602052604090205460ff165b6108075760405162461bcd60e51b815260040161053b90613715565b8051610637906010906020840190612bc3565b6000546001600160a01b031633148061084257503360009081526002602052604090205460ff165b61085e5760405162461bcd60e51b815260040161053b90613715565b600a548263ffffffff161480156108725750805b156108b657600a545b60008181526003602052604090205460ff16156108b25760085481106108a05750600a545b806108aa8161373b565b91505061087b565b600a555b600a548263ffffffff16111580156108cb5750805b156108db5763ffffffff8216600a555b63ffffffff919091166000908152600360205260409020805460ff1916911515919091179055565b61090b612c1c565b61091e61091783611c0b565b848461116d565b90505b92915050565b60095460009063ffffffff83161061094157506001919050565b60098263ffffffff168154811061095a5761095a6136ff565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050919050565b6000546001600160a01b03163314806109af57503360009081526002602052604090205460ff165b6109cb5760405162461bcd60e51b815260040161053b90613715565b60648151106109d957600080fd5b60005b81518110156106375760108282815181106109f9576109f96136ff565b60209081029190910181015182546001810184556000938452928290208151610a2b9491909101929190910190612b00565b506001016109dc565b60606000610a40612a6e565b6005546040516206259160e71b815260206004820152600b60248201526a6d6174636865644d6f646560a81b60448201529192506001600160a01b031690630312c88090606401602060405180830381865afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190613756565b158015610b4057506005546040516206259160e71b81526001600160a01b0390911690630312c88090610afd90600401613773565b602060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e9190613756565b155b15610e2d5783158015610bda57506005546040516206259160e71b815260206004820152601060248201526f6d75737447656e65726174654e616d6560801b60448201526001600160a01b0390911690630312c88090606401602060405180830381865afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda9190613756565b15610be457600193505b831580610bf15750601054155b15610c475760408051600180825281830190925290816020015b6060815260200190600190039081610c0b5790505091508082600081518110610c3657610c366136ff565b602002602001018190525050610921565b610c528460016136e7565b6001600160401b03811115610c6957610c69612e66565b604051908082528060200260200182016040528015610c9c57816020015b6060815260200190600190039081610c875790505b50915060005b848163ffffffff161015610e095760105460405163a0d0ca0f60e01b81526000916001600160a01b0387169163a0d0ca0f91610ce49160040190815260200190565b6020604051808303816000875af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d27919061379c565b6010549091508110610d37575060005b60108181548110610d4a57610d4a6136ff565b906000526020600020018054610d5f906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8b906137b5565b8015610dd85780601f10610dad57610100808354040283529160200191610dd8565b820191906000526020600020905b815481529060010190602001808311610dbb57829003601f168201915b5050505050848363ffffffff1681518110610df557610df56136ff565b602090810291909101015250600101610ca2565b5080828581518110610e1d57610e1d6136ff565b6020026020010181905250611050565b6040805160028082526060820190925290816020015b6060815260200190600190039081610e43575050601054909250610e94576040518060200160405280600081525082600081518110610e8457610e846136ff565b6020026020010181905250611030565b601054600f5463ffffffff161015610f6a57600f5460108054909163ffffffff16908110610ec457610ec46136ff565b906000526020600020018054610ed9906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f05906137b5565b8015610f525780601f10610f2757610100808354040283529160200191610f52565b820191906000526020600020905b815481529060010190602001808311610f3557829003601f168201915b505050505082600081518110610e8457610e846136ff565b6010600081548110610f7e57610f7e6136ff565b906000526020600020018054610f93906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbf906137b5565b801561100c5780601f10610fe15761010080835404028352916020019161100c565b820191906000526020600020905b815481529060010190602001808311610fef57829003601f168201915b505050505082600081518110611024576110246136ff565b60200260200101819052505b8082600181518110611044576110446136ff565b60200260200101819052505b5092915050565b6000546001600160a01b031633148061107f57503360009081526002602052604090205460ff165b61109b5760405162461bcd60e51b815260040161053b90613715565b8051610637906009906020840190612c5e565b60006008548263ffffffff1610801561092157505063ffffffff1660009081526003602052604090205460ff161590565b600780546110ec906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611118906137b5565b80156111655780601f1061113a57610100808354040283529160200191611165565b820191906000526020600020905b81548152906001019060200180831161114857829003601f168201915b505050505081565b611175612c1c565b61117e84611fcb565b61118b6104a585846114ab565b6040518060c001604052808563ffffffff1681526020016111ab86610927565b63ffffffff168152602001600e80548060200260200160405190810160405280929190818152602001828054801561122e57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116111f15790505b505050918352505060055460405163e7b6dac960e01b815260206004820181905260096024830152681b985b5950dbdd5b9d60ba1b604483015290920191611338916001600160a01b038781169263a0d0ca0f92919091169063e7b6dac990606401602060405180830381865afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d1919061379c565b6040518263ffffffff1660e01b81526004016112ef91815260200190565b6020604051808303816000875af115801561130e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611332919061379c565b85610a34565b815260200161134786856121aa565b815260200161135786868661218a565b9052949350505050565b6000546001600160a01b0316331461138b5760405162461bcd60e51b815260040161053b906136ab565b600c80546001810182556000919091528151610637917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701906020840190612d08565b6000546001600160a01b03163314806113f657503360009081526002602052604090205460ff165b6114125760405162461bcd60e51b815260040161053b90613715565b600f805463ffffffff909216600160201b0263ffffffff60201b19909216919091179055565b6060600c828154811061144d5761144d6136ff565b906000526020600020018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020908154815260200190600101908083116107a35750505050509050919050565b6060600b54600014156114bd57610921565b60115460609060ff16156115465760008052600460209081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec805460408051828502810185019091528181529283018282801561153a57602002820191906000526020600020905b815481526020019060010190808311611526575b505050505090506115a9565b63ffffffff8416600090815260046020908152604091829020805483518184028101840190945280845290918301828280156115a157602002820191906000526020600020905b81548152602001906001019080831161158d575b505050505090505b600080846001600160a01b031663bfa0b1336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e919061379c565b905082516000141561162257505050610921565b82516001600160401b0381111561163b5761163b612e66565b604051908082528060200260200182016040528015611664578160200160208202803683370190505b50935060608060005b8551811015611b2157600c86828151811061168a5761168a6136ff565b6020026020010151815481106116a2576116a26136ff565b906000526020600020018054806020026020016040519081016040528092919081815260200182805480156116f657602002820191906000526020600020905b8154815260200190600101908083116116e2575b5050505050915081516000141561174357600087866117148161373b565b975081518110611726576117266136ff565b63ffffffff9092166020928302919091019091015260010161166d565b8151600114801561178b5750600d82600081518110611764576117646136ff565b60200260200101518154811061177c5761177c6136ff565b90600052602060002001546064145b156117b757816000815181106117a3576117a36136ff565b60200260200101518786806117149061373b565b81516001600160401b038111156117d0576117d0612e66565b6040519080825280602002602001820160405280156117f9578160200160208202803683370190505b5092506000805b83518110156119bd578451821415611817576119bd565b838181518110611829576118296136ff565b60200260200101516000141561184157600101611800565b6000848281518110611855576118556136ff565b6020026020010151600d8054905011156118a357600d85838151811061187d5761187d6136ff565b602002602001015181548110611895576118956136ff565b906000526020600020015490505b806064148061195c57506001600160a01b038b16634b0c7aad60648a8a87866118cc898c6136e7565b6118d691906136e7565b6118e091906136e7565b6118ea91906136e7565b6118f491906136e7565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611959919061379c565b81115b156119b457848281518110611973576119736136ff565b60200260200101518684806119879061373b565b955081518110611999576119996136ff565b602002602001019063ffffffff16908163ffffffff16815250505b50600101611800565b50600060018211611a2057846000815181106119db576119db6136ff565b60200260200101518988806119ef9061373b565b995081518110611a0157611a016136ff565b602002602001019063ffffffff16908163ffffffff1681525050611b17565b60028210611b1757896001600160a01b0316634b0c7aad83888a868a51611a4791906136e7565b611a5191906136e7565b611a5b91906136e7565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac0919061379c565b90508451811015611add578481815181106119db576119db6136ff565b60008988611aea8161373b565b995081518110611afc57611afc6136ff565b602002602001019063ffffffff16908163ffffffff16815250505b505060010161166d565b50505050505092915050565b6000546001600160a01b0316331480611b5557503360009081526002602052604090205460ff165b611b715760405162461bcd60e51b815260040161053b90613715565b8060098363ffffffff1681548110611b8b57611b8b6136ff565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000546001600160a01b0316331480611bea57503360009081526002602052604090205460ff165b611c065760405162461bcd60e51b815260040161053b90613715565b600855565b60006008546001148015611c305750600a5460009081526003602052604090205460ff165b15611c6e5760405162461bcd60e51b815260206004820152600e60248201526d4e6f2076616c696420706174687360901b604482015260640161053b565b6005546040516206259160e71b81526001600160a01b0390911690630312c88090611c9b90600401613773565b602060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdc9190613756565b15611dfd57600f8054600160201b900463ffffffff16906004611cfe836137f0565b82546101009290920a63ffffffff818102199093169183160217909155600f805463ffffffff191692909116918217905560085411611d6757600a54600f805467ffffffffffffffff1916600160201b63ffffffff90931692830263ffffffff19161790911790555b600f5463ffffffff1660009081526003602052604090205460ff1615611def57600854600f5463ffffffff1610611db557600a54600f805463ffffffff191663ffffffff9092169190911790555b600f805463ffffffff16906000611dcb836137f0565b91906101000a81548163ffffffff021916908363ffffffff16021790555050611d67565b5050600f5463ffffffff1690565b60085460405163a0d0ca0f60e01b81526000916001600160a01b0385169163a0d0ca0f91611e319160040190815260200190565b6020604051808303816000875af1158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e74919061379c565b63ffffffff811660009081526003602052604090205490915060ff1680611ea357506008548163ffffffff1610155b156109215750600a5492915050565b919050565b6000546001600160a01b03163314611ee15760405162461bcd60e51b815260040161053b906136ab565b80600c8363ffffffff1681548110611efb57611efb6136ff565b906000526020600020019080519060200190611f18929190612d08565b505050565b6000546001600160a01b03163314611f475760405162461bcd60e51b815260040161053b906136ab565b60008052600460209081528151611f83917f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec9190840190612d42565b50506011805460ff19166001179055565b600080546001600160a01b03838116911614806109215750506001600160a01b031660009081526002602052604090205460ff1690565b6000546001600160a01b0316331480611ff357503360009081526002602052604090205460ff165b61200f5760405162461bcd60e51b815260040161053b90613715565b600f805463ffffffff191663ffffffff92909216919091179055565b6000546001600160a01b031633148061205357503360009081526002602052604090205460ff165b61206f5760405162461bcd60e51b815260040161053b90613715565b61207b60106000612d85565b565b6000546001600160a01b031633146120a75760405162461bcd60e51b815260040161053b906136ab565b80518251146120b557600080fd5b60005b8251811015611f18578181815181106120d3576120d36136ff565b6020026020010151600460008584815181106120f1576120f16136ff565b602002602001015163ffffffff1681526020019081526020016000209080519060200190612120929190612d08565b508061212b8161373b565b9150506120b8565b6000546001600160a01b031633148061215b57503360009081526002602052604090205460ff165b6121775760405162461bcd60e51b815260040161053b90613715565b805161063790600e906020840190612c5e565b6040805180820190915260028152617b7d60f01b60208201529392505050565b606060006121b784610927565b60055460405163e7b6dac960e01b815260206004820152600f60248201526e636f6c6f75724368756e6b53697a6560881b60448201529192506000916001600160a01b039091169063e7b6dac990606401602060405180830381865afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612249919061379c565b905060008111612257575060045b808263ffffffff161161247e5760408051600480825260a0820190925290602082016080803683370190505060405163a0d0ca0f60e01b815262ffffff60048201529093506001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af11580156122cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f3919061379c565b83600081518110612306576123066136ff565b602002602001019063ffffffff16908163ffffffff16815250508183600181518110612334576123346136ff565b63ffffffff928316602091820292909201015260405163a0d0ca0f60e01b815260048101919091526001600160a01b0385169063a0d0ca0f906024016020604051808303816000875af115801561238f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b3919061379c565b836002815181106123c6576123c66136ff565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061240990600401613814565b602060405180830381865afa158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a919061379c565b8360038151811061245d5761245d6136ff565b602002602001019063ffffffff16908163ffffffff16815250505050610921565b60006124908263ffffffff8516613850565b61249b9060016136e7565b905060006124aa826002613864565b90508360006124ba836002613890565b63ffffffff166001600160401b038111156124d7576124d7612e66565b604051908082528060200260200182016040528015612500578160200160208202803683370190505b50965060005b8363ffffffff1681101561263b5780158061252957506125276002826138b8565b155b156125cc5760405163a0d0ca0f60e01b815262ffffff60048201526001600160a01b038a169063a0d0ca0f906024016020604051808303816000875af1158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b919061379c565b8882815181106125ad576125ad6136ff565b602002602001019063ffffffff16908163ffffffff1681525050612633565b6000826125d88161373b565b93506125e490886138cc565b6125f49063ffffffff86166138eb565b90508681116126035780612605565b865b898381518110612617576126176136ff565b602002602001019063ffffffff16908163ffffffff1681525050505b600101612506565b5060405163a0d0ca0f60e01b815263ffffffff60048201526001600160a01b0389169063a0d0ca0f906024016020604051808303816000875af1158015612686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126aa919061379c565b87600289516126b991906138eb565b815181106126c9576126c96136ff565b63ffffffff9092166020928302919091019091015260055460405163e7b6dac960e01b81526001600160a01b039091169063e7b6dac99061270c90600401613814565b602060405180830381865afa158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d919061379c565b876001895161275c91906138eb565b8151811061276c5761276c6136ff565b602002602001019063ffffffff16908163ffffffff168152505050505050505092915050565b6000546001600160a01b031633146127bc5760405162461bcd60e51b815260040161053b906136ab565b600080546001600160a01b03908116825260026020526040808320805460ff1990811690915583546001600160a01b03191692851692831784558284528184208054909116600117905551909133917f93091b3f3cd424efabc74e181f3799f3476ed758412561ed3b29515c51f567529190a350565b6000546001600160a01b0316331461285c5760405162461bcd60e51b815260040161053b906136ab565b60005b815181101561063757606482828151811061287c5761287c6136ff565b602002602001015111156128dd5760405162461bcd60e51b815260206004820152602260248201527f6f6e65206f66206d6f7265207261726974696573206172652061626f76652031604482015261030360f41b606482015260840161053b565b600d8282815181106128f1576128f16136ff565b60209081029190910181015182546001818101855560009485529284200155600b8054919290916129239084906136e7565b909155505060010161285f565b6000546001600160a01b0316331461295a5760405162461bcd60e51b815260040161053b906136ab565b6000546001600160a01b03838116911614156129b15760405162461bcd60e51b815260206004820152601660248201527531b0b73737ba1036b7b234b33c903232b83637bcb2b960511b604482015260640161053b565b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155915191825233917ff38de818d000d07d091732dd783c6855722d7bc1934d92b7635133289d341695910160405180910390a35050565b6000546001600160a01b0316331480612a3a57503360009081526002602052604090205460ff165b612a565760405162461bcd60e51b815260040161053b90613715565b612a6260096000612da3565b60006008819055600a55565b606060068054612a7d906137b5565b80601f0160208091040260200160405190810160405280929190818152602001828054612aa9906137b5565b8015612af65780601f10612acb57610100808354040283529160200191612af6565b820191906000526020600020905b815481529060010190602001808311612ad957829003601f168201915b5050505050905090565b828054612b0c906137b5565b90600052602060002090601f016020900481019282612b2e5760008555612b74565b82601f10612b4757805160ff1916838001178555612b74565b82800160010185558215612b74579182015b82811115612b74578251825591602001919060010190612b59565b50612b80929150612dc4565b5090565b5080546000825590600052602060002090810190612ba29190612dc4565b50565b5080546000825590600052602060002090810190612ba29190612dd9565b828054828255906000526020600020908101928215612c10579160200282015b82811115612c105782518051612c00918491602090910190612b00565b5091602001919060010190612be3565b50612b80929150612df6565b6040518060c00160405280600063ffffffff168152602001600063ffffffff168152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090600701600890048101928215612b745791602002820160005b83821115612ccb57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612c87565b8015612cfb5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612ccb565b5050612b80929150612dc4565b828054828255906000526020600020908101928215612b745791602002820182811115612b74578251825591602001919060010190612b59565b828054828255906000526020600020908101928215612b74579160200282015b82811115612b74578251829063ffffffff16905591602001919060010190612d62565b5080546000825590600052602060002090810190612ba29190612df6565b508054600082556007016008900490600052602060002090810190612ba291905b5b80821115612b805760008155600101612dc5565b80821115612b80576000612ded8282612b84565b50600101612dd9565b80821115612b80576000612e0a8282612e13565b50600101612df6565b508054612e1f906137b5565b6000825580601f10612e2f575050565b601f016020900490600052602060002090810190612ba29190612dc4565b600060208284031215612e5f57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612ea457612ea4612e66565b604052919050565b60006001600160401b03821115612ec557612ec5612e66565b5060051b60200190565b6001600160a01b0381168114612ba257600080fd5b60006020808385031215612ef757600080fd5b82356001600160401b03811115612f0d57600080fd5b8301601f81018513612f1e57600080fd5b8035612f31612f2c82612eac565b612e7c565b81815260059190911b82018301908381019087831115612f5057600080fd5b928401925b82841015612f77578335612f6881612ecf565b82529284019290840190612f55565b979650505050505050565b600082601f830112612f9357600080fd5b81356001600160401b03811115612fac57612fac612e66565b612fbf601f8201601f1916602001612e7c565b818152846020838601011115612fd457600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561300357600080fd5b81356001600160401b0381111561301957600080fd5b61302584828501612f82565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561306557835183529284019291840191600101613049565b50909695505050505050565b6000602080838503121561308457600080fd5b82356001600160401b038082111561309b57600080fd5b818501915085601f8301126130af57600080fd5b81356130bd612f2c82612eac565b81815260059190911b830184019084810190888311156130dc57600080fd5b8585015b83811015613114578035858111156130f85760008081fd5b6131068b89838a0101612f82565b8452509186019186016130e0565b5098975050505050505050565b803563ffffffff81168114611eb257600080fd5b8015158114612ba257600080fd5b6000806040838503121561315657600080fd5b61315f83613121565b9150602083013561316f81613135565b809150509250929050565b6000806040838503121561318d57600080fd5b61319683613121565b9150602083013561316f81612ecf565b600081518084526020808501945080840160005b838110156131dc57815163ffffffff16875295820195908201906001016131ba565b509495945050505050565b6000815180845260005b8181101561320d576020818501810151868301820152016131f1565b8181111561321f576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101561327c57828403895261326a8483516131e7565b98850198935090840190600101613252565b5091979650505050505050565b60208152600063ffffffff80845116602084015280602085015116604084015250604083015160c060608401526132c360e08401826131a6565b90506060840151601f19808584030160808601526132e18383613234565b925060808601519150808584030160a08601526132fe83836131a6565b925060a08601519150808584030160c08601525061331c82826131e7565b95945050505050565b60006020828403121561333757600080fd5b61091e82613121565b6000806040838503121561335357600080fd5b82359150602083013561316f81612ecf565b60208152600061091e6020830184613234565b600082601f83011261338957600080fd5b81356020613399612f2c83612eac565b82815260059290921b840181019181810190868411156133b857600080fd5b8286015b848110156133da576133cd81613121565b83529183019183016133bc565b509695505050505050565b6000602082840312156133f757600080fd5b81356001600160401b0381111561340d57600080fd5b61302584828501613378565b60208152600061091e60208301846131e7565b60008060006060848603121561344157600080fd5b61344a84613121565b925061345860208501613121565b9150604084013561346881612ecf565b809150509250925092565b600082601f83011261348457600080fd5b81356020613494612f2c83612eac565b82815260059290921b840181019181810190868411156134b357600080fd5b8286015b848110156133da57803583529183019183016134b7565b6000602082840312156134e057600080fd5b81356001600160401b038111156134f657600080fd5b61302584828501613473565b60208152600061091e60208301846131a6565b6000806040838503121561352857600080fd5b61353183613121565b915061353f60208401613121565b90509250929050565b60006020828403121561355a57600080fd5b813561356581612ecf565b9392505050565b6000806040838503121561357f57600080fd5b61358883613121565b915060208301356001600160401b038111156135a357600080fd5b6135af85828601613473565b9150509250929050565b600080604083850312156135cc57600080fd5b82356001600160401b03808211156135e357600080fd5b6135ef86838701613378565b935060209150818501358181111561360657600080fd5b8501601f8101871361361757600080fd5b8035613625612f2c82612eac565b81815260059190911b8201840190848101908983111561364457600080fd5b8584015b8381101561367c578035868111156136605760008081fd5b61366e8c8983890101613473565b845250918601918601613648565b508096505050505050509250929050565b600080604083850312156136a057600080fd5b823561315f81612ecf565b6020808252600c908201526b3737ba103232b83637bcb2b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156136fa576136fa6136d1565b500190565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b1b9bdd08185c1c1c9bdd995960a21b604082015260600190565b600060001982141561374f5761374f6136d1565b5060010190565b60006020828403121561376857600080fd5b815161356581613135565b6020808252600f908201526e696e6372656d656e74616c4d6f646560881b604082015260600190565b6000602082840312156137ae57600080fd5b5051919050565b600181811c908216806137c957607f821691505b602082108114156137ea57634e487b7160e01b600052602260045260246000fd5b50919050565b600063ffffffff8083168181141561380a5761380a6136d1565b6001019392505050565b6020808252600c908201526b6578747261436f6c6f75727360a01b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261385f5761385f61383a565b500490565b600063ffffffff80831681851681830481118215151615613887576138876136d1565b02949350505050565b600063ffffffff8083168185168083038211156138af576138af6136d1565b01949350505050565b6000826138c7576138c761383a565b500690565b60008160001904831182151516156138e6576138e66136d1565b500290565b6000828210156138fd576138fd6136d1565b50039056fea2646970667358221220a90b31ab919726aa7dd3f3a40bf7f0e9ceeec8eeb225584e8bb9aa2f2263db9864736f6c634300080c0033",
  "libraries": {
    "InfinityMintUtil": "0xd7fcAa6A3e68e4eDAb6eA551594cF60CCe436F73"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 458,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "deployer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 461,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "executionCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3167,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "disabledPaths",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3172,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "pathSections",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3175,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "valuesController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(InfinityMintValues)7222"
      },
      {
        "astId": 3178,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "tokenName",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3181,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetsType",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3183,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "pathCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3186,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "pathSizes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3188,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "safeDefaultReturnPath",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3190,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3194,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetsSections",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 3197,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "assetRarity",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3200,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "lastAssets",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3203,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "nextPath",
        "offset": 0,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 3206,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "lastPath",
        "offset": 4,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 3209,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "names",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3212,
        "contract": "contracts/assets/SimpleImage.sol:SimpleImage",
        "label": "flatSections",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InfinityMintValues)7222": {
        "encoding": "inplace",
        "label": "contract InfinityMintValues",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}